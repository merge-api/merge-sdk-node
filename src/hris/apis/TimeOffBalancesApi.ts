/* tslint:disable */
/* eslint-disable */
/**
 * Merge HRIS API
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    
    TimeOffBalance,
    TimeOffBalanceFromJSON,
    TimeOffBalanceToJSON,
} from '../models';
import {
	MergePaginatedResponse,
	MergePaginatedResponseFromJSON,
	MergePaginatedResponseToJSON,
} from '../../merge_paginated_response';

import {
    MergeMetaRequest
} from '../../merge_meta_request';

export interface TimeOffBalancesListRequest {
    xAccountToken: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    employeeId?: string;
    expand?: Array<TimeOffBalancesListExpandEnum>;
    includeDeletedData?: boolean;
    includeRemoteData?: boolean;
    modifiedAfter?: Date;
    modifiedBefore?: Date;
    pageSize?: number;
    policyType?: TimeOffBalancesListPolicyTypeEnum;
    remoteFields?: TimeOffBalancesListRemoteFieldsEnum;
    remoteId?: string | null;
    showEnumOrigins?: TimeOffBalancesListShowEnumOriginsEnum;
}

export interface TimeOffBalancesRetrieveRequest {
    xAccountToken: string;
    id: string;
    expand?: Array<TimeOffBalancesRetrieveExpandEnum>;
    includeRemoteData?: boolean;
    remoteFields?: TimeOffBalancesRetrieveRemoteFieldsEnum;
    showEnumOrigins?: TimeOffBalancesRetrieveShowEnumOriginsEnum;
}

/**
 * 
 */
export class TimeOffBalancesApi extends runtime.BaseAPI {

    /**
     * Returns a list of `TimeOffBalance` objects.
     */
    async timeOffBalancesListRaw(requestParameters: TimeOffBalancesListRequest): Promise<runtime.ApiResponse<MergePaginatedResponse<TimeOffBalance> | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling timeOffBalancesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.employeeId !== undefined) {
            queryParameters['employee_id'] = requestParameters.employeeId;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.includeDeletedData !== undefined) {
            queryParameters['include_deleted_data'] = requestParameters.includeDeletedData;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modified_after'] = (requestParameters.modifiedAfter as any).toISOString();
        }

        if (requestParameters.modifiedBefore !== undefined) {
            queryParameters['modified_before'] = (requestParameters.modifiedBefore as any).toISOString();
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.policyType !== undefined) {
            queryParameters['policy_type'] = requestParameters.policyType;
        }

        if (requestParameters.remoteFields !== undefined) {
            queryParameters['remote_fields'] = requestParameters.remoteFields;
        }

        if (requestParameters.remoteId !== undefined) {
            queryParameters['remote_id'] = requestParameters.remoteId;
        }

        if (requestParameters.showEnumOrigins !== undefined) {
            queryParameters['show_enum_origins'] = requestParameters.showEnumOrigins;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/hris/v1/time-off-balances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePaginatedResponseFromJSON(jsonValue, TimeOffBalanceFromJSON));
    }

    /**
     * Returns a list of `TimeOffBalance` objects.
     */
    async timeOffBalancesList(requestParameters: TimeOffBalancesListRequest): Promise<MergePaginatedResponse<TimeOffBalance> | undefined> {
        const response = await this.timeOffBalancesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a `TimeOffBalance` object with the given `id`.
     */
    async timeOffBalancesRetrieveRaw(requestParameters: TimeOffBalancesRetrieveRequest): Promise<runtime.ApiResponse<TimeOffBalance | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling timeOffBalancesRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timeOffBalancesRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.remoteFields !== undefined) {
            queryParameters['remote_fields'] = requestParameters.remoteFields;
        }

        if (requestParameters.showEnumOrigins !== undefined) {
            queryParameters['show_enum_origins'] = requestParameters.showEnumOrigins;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/hris/v1/time-off-balances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeOffBalanceFromJSON(jsonValue));
    }

    /**
     * Returns a `TimeOffBalance` object with the given `id`.
     */
    async timeOffBalancesRetrieve(requestParameters: TimeOffBalancesRetrieveRequest): Promise<TimeOffBalance | undefined> {
        const response = await this.timeOffBalancesRetrieveRaw(requestParameters);
        return await response.value();
    }

}

/**
* @export
* @enum {string}
*/
export enum TimeOffBalancesListExpandEnum {
    Employee = 'employee'
}
/**
* @export
* @enum {string}
*/
export enum TimeOffBalancesListPolicyTypeEnum {
    Bereavement = 'BEREAVEMENT',
    JuryDuty = 'JURY_DUTY',
    Personal = 'PERSONAL',
    Sick = 'SICK',
    Vacation = 'VACATION',
    Volunteer = 'VOLUNTEER'
}
/**
* @export
* @enum {string}
*/
export enum TimeOffBalancesListRemoteFieldsEnum {
    PolicyType = 'policy_type'
}
/**
* @export
* @enum {string}
*/
export enum TimeOffBalancesListShowEnumOriginsEnum {
    PolicyType = 'policy_type'
}
/**
* @export
* @enum {string}
*/
export enum TimeOffBalancesRetrieveExpandEnum {
    Employee = 'employee'
}
/**
* @export
* @enum {string}
*/
export enum TimeOffBalancesRetrieveRemoteFieldsEnum {
    PolicyType = 'policy_type'
}
/**
* @export
* @enum {string}
*/
export enum TimeOffBalancesRetrieveShowEnumOriginsEnum {
    PolicyType = 'policy_type'
}
