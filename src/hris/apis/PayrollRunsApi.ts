/* tslint:disable */
/* eslint-disable */
/**
 * Merge HRIS API
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    
    PayrollRun,
    PayrollRunFromJSON,
    PayrollRunToJSON,
} from '../models';
import {
	MergePaginatedResponse,
	MergePaginatedResponseFromJSON,
	MergePaginatedResponseToJSON,
} from '../../merge_paginated_response';

export interface PayrollRunsListRequest {
    xAccountToken: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    endedAfter?: Date | null;
    endedBefore?: Date | null;
    includeDeletedData?: boolean;
    includeRemoteData?: boolean;
    modifiedAfter?: Date;
    modifiedBefore?: Date;
    pageSize?: number;
    remoteFields?: PayrollRunsListRemoteFieldsEnum;
    remoteId?: string | null;
    runType?: PayrollRunsListRunTypeEnum;
    startedAfter?: Date | null;
    startedBefore?: Date | null;
}

export interface PayrollRunsRetrieveRequest {
    xAccountToken: string;
    id: string;
    includeRemoteData?: boolean;
    remoteFields?: PayrollRunsRetrieveRemoteFieldsEnum;
}

/**
 * 
 */
export class PayrollRunsApi extends runtime.BaseAPI {

    /**
     * Returns a list of `PayrollRun` objects.
     */
    async payrollRunsListRaw(requestParameters: PayrollRunsListRequest): Promise<runtime.ApiResponse<MergePaginatedResponse<PayrollRun>>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling payrollRunsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.endedAfter !== undefined) {
            queryParameters['ended_after'] = (requestParameters.endedAfter as any).toISOString();
        }

        if (requestParameters.endedBefore !== undefined) {
            queryParameters['ended_before'] = (requestParameters.endedBefore as any).toISOString();
        }

        if (requestParameters.includeDeletedData !== undefined) {
            queryParameters['include_deleted_data'] = requestParameters.includeDeletedData;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modified_after'] = (requestParameters.modifiedAfter as any).toISOString();
        }

        if (requestParameters.modifiedBefore !== undefined) {
            queryParameters['modified_before'] = (requestParameters.modifiedBefore as any).toISOString();
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.remoteFields !== undefined) {
            queryParameters['remote_fields'] = requestParameters.remoteFields;
        }

        if (requestParameters.remoteId !== undefined) {
            queryParameters['remote_id'] = requestParameters.remoteId;
        }

        if (requestParameters.runType !== undefined) {
            queryParameters['run_type'] = requestParameters.runType;
        }

        if (requestParameters.startedAfter !== undefined) {
            queryParameters['started_after'] = (requestParameters.startedAfter as any).toISOString();
        }

        if (requestParameters.startedBefore !== undefined) {
            queryParameters['started_before'] = (requestParameters.startedBefore as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/payroll-runs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of `PayrollRun` objects.
     */
    async payrollRunsList(requestParameters: PayrollRunsListRequest): Promise<MergePaginatedResponse<PayrollRun>> {
        const response = await this.payrollRunsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a `PayrollRun` object with the given `id`.
     */
    async payrollRunsRetrieveRaw(requestParameters: PayrollRunsRetrieveRequest): Promise<runtime.ApiResponse<PayrollRun>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling payrollRunsRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling payrollRunsRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.remoteFields !== undefined) {
            queryParameters['remote_fields'] = requestParameters.remoteFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/payroll-runs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PayrollRunFromJSON(jsonValue));
    }

    /**
     * Returns a `PayrollRun` object with the given `id`.
     */
    async payrollRunsRetrieve(requestParameters: PayrollRunsRetrieveRequest): Promise<PayrollRun> {
        const response = await this.payrollRunsRetrieveRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PayrollRunsListRemoteFieldsEnum {
    State = 'run_state',
    StaterunType = 'run_state,run_type',
    Type = 'run_type'
}
/**
    * @export
    * @enum {string}
    */
export enum PayrollRunsListRunTypeEnum {
    Correction = 'CORRECTION',
    OffCycle = 'OFF_CYCLE',
    Regular = 'REGULAR',
    SignOnBonus = 'SIGN_ON_BONUS',
    Termination = 'TERMINATION'
}
/**
    * @export
    * @enum {string}
    */
export enum PayrollRunsRetrieveRemoteFieldsEnum {
    State = 'run_state',
    StaterunType = 'run_state,run_type',
    Type = 'run_type'
}
