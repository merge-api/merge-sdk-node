/* tslint:disable */
/* eslint-disable */
/**
 * Merge HRIS API
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Employment,
    EmploymentFromJSON,
    EmploymentToJSON,
    PaginatedEmploymentList,
    PaginatedEmploymentListFromJSON,
    PaginatedEmploymentListToJSON,
} from '../models';

export interface EmploymentsListRequest {
    xAccountToken: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    employeeId?: string;
    includeDeletedData?: boolean;
    includeRemoteData?: boolean;
    modifiedAfter?: Date;
    modifiedBefore?: Date;
    orderBy?: EmploymentsListOrderByEnum;
    pageSize?: number;
    remoteFields?: EmploymentsListRemoteFieldsEnum;
    remoteId?: string | null;
}

export interface EmploymentsRetrieveRequest {
    xAccountToken: string;
    id: string;
    includeRemoteData?: boolean;
    remoteFields?: EmploymentsRetrieveRemoteFieldsEnum;
}

/**
 * 
 */
export class EmploymentsApi extends runtime.BaseAPI {

    /**
     * Returns a list of `Employment` objects.
     */
    async employmentsListRaw(requestParameters: EmploymentsListRequest): Promise<runtime.ApiResponse<PaginatedEmploymentList>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling employmentsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.employeeId !== undefined) {
            queryParameters['employee_id'] = requestParameters.employeeId;
        }

        if (requestParameters.includeDeletedData !== undefined) {
            queryParameters['include_deleted_data'] = requestParameters.includeDeletedData;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modified_after'] = (requestParameters.modifiedAfter as any).toISOString();
        }

        if (requestParameters.modifiedBefore !== undefined) {
            queryParameters['modified_before'] = (requestParameters.modifiedBefore as any).toISOString();
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.remoteFields !== undefined) {
            queryParameters['remote_fields'] = requestParameters.remoteFields;
        }

        if (requestParameters.remoteId !== undefined) {
            queryParameters['remote_id'] = requestParameters.remoteId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/employments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmploymentListFromJSON(jsonValue));
    }

    /**
     * Returns a list of `Employment` objects.
     */
    async employmentsList(requestParameters: EmploymentsListRequest): Promise<PaginatedEmploymentList> {
        const response = await this.employmentsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an `Employment` object with the given `id`.
     */
    async employmentsRetrieveRaw(requestParameters: EmploymentsRetrieveRequest): Promise<runtime.ApiResponse<Employment>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling employmentsRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling employmentsRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.remoteFields !== undefined) {
            queryParameters['remote_fields'] = requestParameters.remoteFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/employments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentFromJSON(jsonValue));
    }

    /**
     * Returns an `Employment` object with the given `id`.
     */
    async employmentsRetrieve(requestParameters: EmploymentsRetrieveRequest): Promise<Employment> {
        const response = await this.employmentsRetrieveRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentsListOrderByEnum {
    EffectiveDate = '-effective_date',
    EffectiveDate = 'effective_date'
}
/**
    * @export
    * @enum {string}
    */
export enum EmploymentsListRemoteFieldsEnum {
    EmploymentType = 'employment_type',
    EmploymentTypeflsaStatus = 'employment_type,flsa_status',
    EmploymentTypeflsaStatuspayFrequency = 'employment_type,flsa_status,pay_frequency',
    EmploymentTypeflsaStatuspayFrequencypayPeriod = 'employment_type,flsa_status,pay_frequency,pay_period',
    EmploymentTypeflsaStatuspayPeriod = 'employment_type,flsa_status,pay_period',
    EmploymentTypepayFrequency = 'employment_type,pay_frequency',
    EmploymentTypepayFrequencypayPeriod = 'employment_type,pay_frequency,pay_period',
    EmploymentTypepayPeriod = 'employment_type,pay_period',
    FlsaStatus = 'flsa_status',
    FlsaStatuspayFrequency = 'flsa_status,pay_frequency',
    FlsaStatuspayFrequencypayPeriod = 'flsa_status,pay_frequency,pay_period',
    FlsaStatuspayPeriod = 'flsa_status,pay_period',
    PayFrequency = 'pay_frequency',
    PayFrequencypayPeriod = 'pay_frequency,pay_period',
    PayPeriod = 'pay_period'
}
/**
    * @export
    * @enum {string}
    */
export enum EmploymentsRetrieveRemoteFieldsEnum {
    EmploymentType = 'employment_type',
    EmploymentTypeflsaStatus = 'employment_type,flsa_status',
    EmploymentTypeflsaStatuspayFrequency = 'employment_type,flsa_status,pay_frequency',
    EmploymentTypeflsaStatuspayFrequencypayPeriod = 'employment_type,flsa_status,pay_frequency,pay_period',
    EmploymentTypeflsaStatuspayPeriod = 'employment_type,flsa_status,pay_period',
    EmploymentTypepayFrequency = 'employment_type,pay_frequency',
    EmploymentTypepayFrequencypayPeriod = 'employment_type,pay_frequency,pay_period',
    EmploymentTypepayPeriod = 'employment_type,pay_period',
    FlsaStatus = 'flsa_status',
    FlsaStatuspayFrequency = 'flsa_status,pay_frequency',
    FlsaStatuspayFrequencypayPeriod = 'flsa_status,pay_frequency,pay_period',
    FlsaStatuspayPeriod = 'flsa_status,pay_period',
    PayFrequency = 'pay_frequency',
    PayFrequencypayPeriod = 'pay_frequency,pay_period',
    PayPeriod = 'pay_period'
}
