/* tslint:disable */
/* eslint-disable */
/**
 * Merge HRIS API
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    CountryEnum,
    CountryEnumFromJSON,
    CountryEnumFromJSONTyped,
    CountryEnumToJSON,
    LocationTypeEnum,
    LocationTypeEnumFromJSON,
    LocationTypeEnumFromJSONTyped,
    LocationTypeEnumToJSON,
    
} from './';
import {
	RemoteData,
	RemoteDataFromJSON,
	RemoteDataFromJSONTyped,
	RemoteDataToJSON,
} from '../../remote_data';


/**
 * # The Location Object
 * ### Description
 * The `Location` object is used to represent an address that can be associated with an employee.
 * 
 * ### Usage Example
 * Fetch from the `LIST Locations` endpoint and filter by `ID` to show all office locations.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Location
     */
    remote_id?: string | null;
    /**
     * The location's name.
     * @type {string}
     * @memberof Location
     */
    name?: string | null;
    /**
     * The location's phone number.
     * @type {string}
     * @memberof Location
     */
    phone_number?: string | null;
    /**
     * Line 1 of the location's street address.
     * @type {string}
     * @memberof Location
     */
    street_1?: string | null;
    /**
     * Line 2 of the location's street address.
     * @type {string}
     * @memberof Location
     */
    street_2?: string | null;
    /**
     * The location's city.
     * @type {string}
     * @memberof Location
     */
    city?: string | null;
    /**
     * The location's state. Represents a region if outside of the US.
     * @type {string}
     * @memberof Location
     */
    state?: string | null;
    /**
     * The location's zip code or postal code.
     * @type {string}
     * @memberof Location
     */
    zip_code?: string | null;
    /**
     * The location's country.
     * @type {CountryEnum}
     * @memberof Location
     */
    country?: CountryEnum | null;
    /**
     * The location's type. Can be either WORK or HOME
     * @type {LocationTypeEnum}
     * @memberof Location
     */
    location_type?: LocationTypeEnum | null;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof Location
     */
    readonly remote_was_deleted?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Location
     */
    readonly field_mappings?: { [key: string]: any; } | null;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof Location
     */
    readonly remote_data?: Array<RemoteData> | null;
}

export function LocationFromJSON(json: JSONValue): Location | undefined {
    return LocationFromJSONTyped(json);
}

export function LocationFromJSONTyped(json: JSONValue): Location | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'phone_number': !exists(json, 'phone_number') ? undefined : json['phone_number'],
        'street_1': !exists(json, 'street_1') ? undefined : json['street_1'],
        'street_2': !exists(json, 'street_2') ? undefined : json['street_2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip_code': !exists(json, 'zip_code') ? undefined : json['zip_code'],
        'country': !exists(json, 'country') ? undefined : CountryEnumFromJSON(json['country']) as CountryEnum,
        'location_type': !exists(json, 'location_type') ? undefined : LocationTypeEnumFromJSON(json['location_type']) as LocationTypeEnum,
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
        'field_mappings': !exists(json, 'field_mappings') ? undefined : json['field_mappings'],
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<JSONValue>).map(RemoteDataFromJSON)) as Array<RemoteData>,
    };
}

export function LocationToJSON(value?: Location): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'name': value.name,
        'phone_number': value.phone_number,
        'street_1': value.street_1,
        'street_2': value.street_2,
        'city': value.city,
        'state': value.state,
        'zip_code': value.zip_code,
        'country': CountryEnumToJSON(value.country),
        'location_type': LocationTypeEnumToJSON(value.location_type),
    };
}

