/* tslint:disable */
/* eslint-disable */
/**
 * Merge HRIS API
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    GroupTypeEnum,
    GroupTypeEnumFromJSON,
    GroupTypeEnumFromJSONTyped,
    GroupTypeEnumToJSON,
    
} from './';
import {
	RemoteData,
	RemoteDataFromJSON,
	RemoteDataFromJSONTyped,
	RemoteDataToJSON,
} from '../../remote_data';


/**
 * # The Group Object
 * ### Description
 * The `Group` object is used to represent any subset of employees, such as `PayGroup` or `Team`. Employees can be in multiple Groups.
 * 
 * ### Usage Example
 * Fetch from the `LIST Employee` endpoint and expand groups to view an employee's groups.
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Group
     */
    remote_id?: string | null;
    /**
     * The parent group for this group.
     * @type {string}
     * @memberof Group
     */
    parent_group?: string | null;
    /**
     * The group name.
     * @type {string}
     * @memberof Group
     */
    name?: string | null;
    /**
     * The group type
     * 
     * * `TEAM` - TEAM
     * * `DEPARTMENT` - DEPARTMENT
     * * `COST_CENTER` - COST_CENTER
     * * `BUSINESS_UNIT` - BUSINESS_UNIT
     * * `GROUP` - GROUP
     * @type {GroupTypeEnum}
     * @memberof Group
     */
    type?: GroupTypeEnum | null;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof Group
     */
    readonly remote_was_deleted?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Group
     */
    readonly field_mappings?: { [key: string]: any; } | null;
    /**
     * This is the datetime that this object was last updated by Merge
     * @type {Date}
     * @memberof Group
     */
    readonly modified_at?: Date;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof Group
     */
    readonly remote_data?: Array<RemoteData> | null;
}

export function GroupFromJSON(json: JSONValue): Group | undefined {
    return GroupFromJSONTyped(json);
}

export function GroupFromJSONTyped(json: JSONValue): Group | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'parent_group': !exists(json, 'parent_group') ? undefined : json['parent_group'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': !exists(json, 'type') ? undefined : GroupTypeEnumFromJSON(json['type']) as GroupTypeEnum,
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
        'field_mappings': !exists(json, 'field_mappings') ? undefined : json['field_mappings'],
        'modified_at': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<JSONValue>).map(RemoteDataFromJSON)) as Array<RemoteData>,
    };
}

export function GroupToJSON(value?: Group): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'parent_group': value.parent_group,
        'name': value.name,
        'type': GroupTypeEnumToJSON(value.type),
    };
}

