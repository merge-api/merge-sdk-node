/* tslint:disable */
/* eslint-disable */
/**
 * Merge HRIS API
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    
    RunStateEnum,
    RunStateEnumFromJSON,
    RunStateEnumFromJSONTyped,
    RunStateEnumToJSON,
    RunTypeEnum,
    RunTypeEnumFromJSON,
    RunTypeEnumFromJSONTyped,
    RunTypeEnumToJSON,
} from './';
import {
	RemoteData,
	RemoteDataFromJSON,
	RemoteDataFromJSONTyped,
	RemoteDataToJSON,
} from '../../remote_data';


/**
 * # The PayrollRun Object
 * ### Description
 * The `PayrollRun` object is used to represent a group of pay statements for a specific pay schedule.
 * 
 * ### Usage Example
 * Fetch from the `LIST PayrollRuns` endpoint and filter by `ID` to show all payroll runs.
 * @export
 * @interface PayrollRun
 */
export interface PayrollRun {
    /**
     * 
     * @type {string}
     * @memberof PayrollRun
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof PayrollRun
     */
    remote_id?: string | null;
    /**
     * The state of the payroll run
     * 
     * * `PAID` - PAID
     * * `DRAFT` - DRAFT
     * * `APPROVED` - APPROVED
     * * `FAILED` - FAILED
     * * `CLOSED` - CLOSED
     * @type {RunStateEnum}
     * @memberof PayrollRun
     */
    run_state?: RunStateEnum | null;
    /**
     * The type of the payroll run
     * 
     * * `REGULAR` - REGULAR
     * * `OFF_CYCLE` - OFF_CYCLE
     * * `CORRECTION` - CORRECTION
     * * `TERMINATION` - TERMINATION
     * * `SIGN_ON_BONUS` - SIGN_ON_BONUS
     * @type {RunTypeEnum}
     * @memberof PayrollRun
     */
    run_type?: RunTypeEnum | null;
    /**
     * The day and time the payroll run started.
     * @type {Date}
     * @memberof PayrollRun
     */
    start_date?: Date | null;
    /**
     * The day and time the payroll run ended.
     * @type {Date}
     * @memberof PayrollRun
     */
    end_date?: Date | null;
    /**
     * The day and time the payroll run was checked.
     * @type {Date}
     * @memberof PayrollRun
     */
    check_date?: Date | null;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof PayrollRun
     */
    readonly remote_was_deleted?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PayrollRun
     */
    readonly field_mappings?: { [key: string]: any; } | null;
    /**
     * This is the datetime that this object was last updated by Merge
     * @type {Date}
     * @memberof PayrollRun
     */
    readonly modified_at?: Date;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof PayrollRun
     */
    readonly remote_data?: Array<RemoteData> | null;
}

export function PayrollRunFromJSON(json: JSONValue): PayrollRun | undefined {
    return PayrollRunFromJSONTyped(json);
}

export function PayrollRunFromJSONTyped(json: JSONValue): PayrollRun | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'run_state': !exists(json, 'run_state') ? undefined : RunStateEnumFromJSON(json['run_state']) as RunStateEnum,
        'run_type': !exists(json, 'run_type') ? undefined : RunTypeEnumFromJSON(json['run_type']) as RunTypeEnum,
        'start_date': !exists(json, 'start_date') ? undefined : (json['start_date'] === null ? null : new Date(json['start_date'])),
        'end_date': !exists(json, 'end_date') ? undefined : (json['end_date'] === null ? null : new Date(json['end_date'])),
        'check_date': !exists(json, 'check_date') ? undefined : (json['check_date'] === null ? null : new Date(json['check_date'])),
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
        'field_mappings': !exists(json, 'field_mappings') ? undefined : json['field_mappings'],
        'modified_at': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<JSONValue>).map(RemoteDataFromJSON)) as Array<RemoteData>,
    };
}

export function PayrollRunToJSON(value?: PayrollRun): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'run_state': RunStateEnumToJSON(value.run_state),
        'run_type': RunTypeEnumToJSON(value.run_type),
        'start_date': value.start_date === undefined ? undefined : (value.start_date === null ? null : value.start_date.toISOString()),
        'end_date': value.end_date === undefined ? undefined : (value.end_date === null ? null : value.end_date.toISOString()),
        'check_date': value.check_date === undefined ? undefined : (value.check_date === null ? null : value.check_date.toISOString()),
    };
}

