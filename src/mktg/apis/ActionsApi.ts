/* tslint:disable */
/* eslint-disable */
/**
 * Merge Marketing Automation API
 * The unified API for building rich integrations with multiple Marketing Automation platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    Action,
    ActionFromJSON,
    ActionToJSON,
    MKTGActionEndpointRequest,
    MKTGActionEndpointRequestFromJSON,
    MKTGActionEndpointRequestToJSON,
    MKTGActionResponse,
    MKTGActionResponseFromJSON,
    MKTGActionResponseToJSON,
    MetaResponse,
    MetaResponseFromJSON,
    MetaResponseToJSON,
    
} from '../models';
import {
	MergePaginatedResponse,
	MergePaginatedResponseFromJSON,
	MergePaginatedResponseToJSON,
} from '../../merge_paginated_response';

import {
    MergeMetaRequest
} from '../../merge_meta_request';

export interface ActionsCreateRequest {
    xAccountToken: string;
    mKTGActionEndpointRequest: MKTGActionEndpointRequest;
    isDebugMode?: boolean;
    runAsync?: boolean;
}

export interface ActionsListRequest {
    xAccountToken: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    includeDeletedData?: boolean;
    includeRemoteData?: boolean;
    modifiedAfter?: Date;
    modifiedBefore?: Date;
    pageSize?: number;
    remoteId?: string | null;
}

export interface ActionsMetaPostRetrieveRequest extends MergeMetaRequest {
    xAccountToken: string;
}

export interface ActionsRetrieveRequest {
    xAccountToken: string;
    id: string;
    includeRemoteData?: boolean;
}

/**
 * 
 */
export class ActionsApi extends runtime.BaseAPI {

    /**
     * Creates an `Action` object with the given values.
     */
    async actionsCreateRaw(requestParameters: ActionsCreateRequest): Promise<runtime.ApiResponse<MKTGActionResponse | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling actionsCreate.');
        }

        if (requestParameters.mKTGActionEndpointRequest === null || requestParameters.mKTGActionEndpointRequest === undefined) {
            throw new runtime.RequiredError('mKTGActionEndpointRequest','Required parameter requestParameters.mKTGActionEndpointRequest was null or undefined when calling actionsCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.isDebugMode !== undefined) {
            queryParameters['is_debug_mode'] = requestParameters.isDebugMode;
        }

        if (requestParameters.runAsync !== undefined) {
            queryParameters['run_async'] = requestParameters.runAsync;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/mktg/v1/actions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MKTGActionEndpointRequestToJSON(requestParameters.mKTGActionEndpointRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MKTGActionResponseFromJSON(jsonValue));
    }

    /**
     * Creates an `Action` object with the given values.
     */
    async actionsCreate(requestParameters: ActionsCreateRequest): Promise<MKTGActionResponse | undefined> {
        const response = await this.actionsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of `Action` objects.
     */
    async actionsListRaw(requestParameters: ActionsListRequest): Promise<runtime.ApiResponse<MergePaginatedResponse<Action> | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling actionsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.includeDeletedData !== undefined) {
            queryParameters['include_deleted_data'] = requestParameters.includeDeletedData;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modified_after'] = (requestParameters.modifiedAfter as any).toISOString();
        }

        if (requestParameters.modifiedBefore !== undefined) {
            queryParameters['modified_before'] = (requestParameters.modifiedBefore as any).toISOString();
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.remoteId !== undefined) {
            queryParameters['remote_id'] = requestParameters.remoteId;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/mktg/v1/actions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePaginatedResponseFromJSON(jsonValue, ActionFromJSON));
    }

    /**
     * Returns a list of `Action` objects.
     */
    async actionsList(requestParameters: ActionsListRequest): Promise<MergePaginatedResponse<Action> | undefined> {
        const response = await this.actionsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns metadata for `MKTGAction` POSTs.
     */
    async actionsMetaPostRetrieveRaw(requestParameters: ActionsMetaPostRetrieveRequest): Promise<runtime.ApiResponse<MetaResponse | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling actionsMetaPostRetrieve.');
        }

        const queryParameters: any = {};


        if (requestParameters !== undefined) {
            Object.keys(requestParameters.misc_params_query).forEach((key) => {
                if (requestParameters.misc_params_query[key] !== undefined) {
                    queryParameters[key] = requestParameters.misc_params_query[key];
                }
            })
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/mktg/v1/actions/meta/post`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaResponseFromJSON(jsonValue));
    }

    /**
     * Returns metadata for `MKTGAction` POSTs.
     */
    async actionsMetaPostRetrieve(requestParameters: ActionsMetaPostRetrieveRequest): Promise<MetaResponse | undefined> {
        const response = await this.actionsMetaPostRetrieveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an `Action` object with the given `id`.
     */
    async actionsRetrieveRaw(requestParameters: ActionsRetrieveRequest): Promise<runtime.ApiResponse<Action | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling actionsRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling actionsRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/mktg/v1/actions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionFromJSON(jsonValue));
    }

    /**
     * Returns an `Action` object with the given `id`.
     */
    async actionsRetrieve(requestParameters: ActionsRetrieveRequest): Promise<Action | undefined> {
        const response = await this.actionsRetrieveRaw(requestParameters);
        return await response.value();
    }

}
