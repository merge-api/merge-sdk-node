/* tslint:disable */
/* eslint-disable */
/**
 * Merge Marketing Automation API
 * The unified API for building rich integrations with multiple Marketing Automation platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    TypeEnum,
    TypeEnumFromJSON,
    TypeEnumFromJSONTyped,
    TypeEnumToJSON,
} from './';


/**
 * # The Action Object
 * ### Description
 * The `Action` object is used to represent an action executed within an automation.
 * ### Usage Example
 * Fetch from the `GET /api/mktg/v1/actions` endpoint and view their types.
 * @export
 * @interface Action
 */
export interface Action {
    /**
     * The action's name.
     * @type {string}
     * @memberof Action
     */
    name?: string | null;
    /**
     * The marketing emails sent by this action.
     * @type {Array<string>}
     * @memberof Action
     */
    emails: Array<string>;
    /**
     * The messages sent by this action.
     * @type {Array<string>}
     * @memberof Action
     */
    messages: Array<string>;
    /**
     * The action's type.
     * @type {TypeEnum}
     * @memberof Action
     */
    type?: TypeEnum | null;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Action
     */
    remote_id?: string | null;
}

export function ActionFromJSON(json: JSONValue): Action | undefined {
    return ActionFromJSONTyped(json);
}

export function ActionFromJSONTyped(json: JSONValue): Action | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'emails': json['emails'],
        'messages': json['messages'],
        'type': !exists(json, 'type') ? undefined : TypeEnumFromJSON(json['type']) as TypeEnum,
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
    };
}

export function ActionToJSON(value?: Action): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'name': value.name,
        'emails': value.emails,
        'messages': value.messages,
        'type': TypeEnumToJSON(value.type),
        'remote_id': value.remote_id,
    };
}

