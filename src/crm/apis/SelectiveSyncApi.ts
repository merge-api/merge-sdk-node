/* tslint:disable */
/* eslint-disable */
/**
 * Merge CRM API
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    ConditionSchema,
    ConditionSchemaFromJSON,
    LinkedAccountSelectiveSyncConfiguration,
    LinkedAccountSelectiveSyncConfigurationFromJSON,
    LinkedAccountSelectiveSyncConfigurationToJSON,
    LinkedAccountSelectiveSyncConfigurationListRequest,
    LinkedAccountSelectiveSyncConfigurationListRequestFromJSON,
    LinkedAccountSelectiveSyncConfigurationListRequestToJSON,
    
} from '../models';
import {
	MergePaginatedResponse,
	MergePaginatedResponseFromJSON,
	MergePaginatedResponseToJSON,
} from '../../merge_paginated_response';

import {
    MergeMetaRequest
} from '../../merge_meta_request';

export interface SelectiveSyncConfigurationsListRequest {
    xAccountToken: string;
}

export interface SelectiveSyncConfigurationsUpdateRequest {
    xAccountToken: string;
    linkedAccountSelectiveSyncConfigurationListRequest: LinkedAccountSelectiveSyncConfigurationListRequest;
}

export interface SelectiveSyncMetaListRequest {
    xAccountToken: string;
    commonModel?: string;
    cursor?: string;
    pageSize?: number;
}

/**
 * 
 */
export class SelectiveSyncApi extends runtime.BaseAPI {

    /**
     * Get a linked account\'s selective syncs.
     */
    async selectiveSyncConfigurationsListRaw(requestParameters: SelectiveSyncConfigurationsListRequest): Promise<runtime.ApiResponse<Array<LinkedAccountSelectiveSyncConfiguration> | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling selectiveSyncConfigurationsList.');
        }

        const queryParameters: any = {};


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/crm/v1/selective-sync/configurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LinkedAccountSelectiveSyncConfigurationFromJSON));
    }

    /**
     * Get a linked account\'s selective syncs.
     */
    async selectiveSyncConfigurationsList(requestParameters: SelectiveSyncConfigurationsListRequest): Promise<Array<LinkedAccountSelectiveSyncConfiguration> | undefined> {
        const response = await this.selectiveSyncConfigurationsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replace a linked account\'s selective syncs.
     */
    async selectiveSyncConfigurationsUpdateRaw(requestParameters: SelectiveSyncConfigurationsUpdateRequest): Promise<runtime.ApiResponse<Array<LinkedAccountSelectiveSyncConfiguration> | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling selectiveSyncConfigurationsUpdate.');
        }

        if (requestParameters.linkedAccountSelectiveSyncConfigurationListRequest === null || requestParameters.linkedAccountSelectiveSyncConfigurationListRequest === undefined) {
            throw new runtime.RequiredError('linkedAccountSelectiveSyncConfigurationListRequest','Required parameter requestParameters.linkedAccountSelectiveSyncConfigurationListRequest was null or undefined when calling selectiveSyncConfigurationsUpdate.');
        }

        const queryParameters: any = {};


        

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/crm/v1/selective-sync/configurations`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedAccountSelectiveSyncConfigurationListRequestToJSON(requestParameters.linkedAccountSelectiveSyncConfigurationListRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LinkedAccountSelectiveSyncConfigurationFromJSON));
    }

    /**
     * Replace a linked account\'s selective syncs.
     */
    async selectiveSyncConfigurationsUpdate(requestParameters: SelectiveSyncConfigurationsUpdateRequest): Promise<Array<LinkedAccountSelectiveSyncConfiguration> | undefined> {
        const response = await this.selectiveSyncConfigurationsUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get metadata for the conditions available to a linked account.
     */
    async selectiveSyncMetaListRaw(requestParameters: SelectiveSyncMetaListRequest): Promise<runtime.ApiResponse<MergePaginatedResponse<ConditionSchema> | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling selectiveSyncMetaList.');
        }

        const queryParameters: any = {};

        if (requestParameters.commonModel !== undefined) {
            queryParameters['common_model'] = requestParameters.commonModel;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/crm/v1/selective-sync/meta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePaginatedResponseFromJSON(jsonValue, ConditionSchemaFromJSON));
    }

    /**
     * Get metadata for the conditions available to a linked account.
     */
    async selectiveSyncMetaList(requestParameters: SelectiveSyncMetaListRequest): Promise<MergePaginatedResponse<ConditionSchema> | undefined> {
        const response = await this.selectiveSyncMetaListRaw(requestParameters);
        return await response.value();
    }

}
