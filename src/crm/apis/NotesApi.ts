/* tslint:disable */
/* eslint-disable */
/**
 * Merge CRM API
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    MetaResponse,
    MetaResponseFromJSON,
    MetaResponseToJSON,
    Note,
    NoteFromJSON,
    NoteToJSON,
    NoteEndpointRequest,
    NoteEndpointRequestFromJSON,
    NoteEndpointRequestToJSON,
    NoteResponse,
    NoteResponseFromJSON,
    NoteResponseToJSON,
    
} from '../models';
import {
	MergePaginatedResponse,
	MergePaginatedResponseFromJSON,
	MergePaginatedResponseToJSON,
} from '../../merge_paginated_response';

export interface NotesCreateRequest {
    xAccountToken: string;
    noteEndpointRequest: NoteEndpointRequest;
    isDebugMode?: boolean;
    runAsync?: boolean;
}

export interface NotesListRequest {
    xAccountToken: string;
    accountId?: string;
    contactId?: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    includeDeletedData?: boolean;
    includeRemoteData?: boolean;
    modifiedAfter?: Date;
    modifiedBefore?: Date;
    opportunityId?: string;
    ownerId?: string;
    pageSize?: number;
    remoteId?: string | null;
}

export interface NotesMetaPostRetrieveRequest {
    xAccountToken: string;
}

export interface NotesRetrieveRequest {
    xAccountToken: string;
    id: string;
    includeRemoteData?: boolean;
}

/**
 * 
 */
export class NotesApi extends runtime.BaseAPI {

    /**
     * Creates a `Note` object with the given values.
     */
    async notesCreateRaw(requestParameters: NotesCreateRequest): Promise<runtime.ApiResponse<NoteResponse>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling notesCreate.');
        }

        if (requestParameters.noteEndpointRequest === null || requestParameters.noteEndpointRequest === undefined) {
            throw new runtime.RequiredError('noteEndpointRequest','Required parameter requestParameters.noteEndpointRequest was null or undefined when calling notesCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.isDebugMode !== undefined) {
            queryParameters['is_debug_mode'] = requestParameters.isDebugMode;
        }

        if (requestParameters.runAsync !== undefined) {
            queryParameters['run_async'] = requestParameters.runAsync;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NoteEndpointRequestToJSON(requestParameters.noteEndpointRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteResponseFromJSON(jsonValue));
    }

    /**
     * Creates a `Note` object with the given values.
     */
    async notesCreate(requestParameters: NotesCreateRequest): Promise<NoteResponse> {
        const response = await this.notesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of `Note` objects.
     */
    async notesListRaw(requestParameters: NotesListRequest): Promise<runtime.ApiResponse<MergePaginatedResponse<Note>>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling notesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['account_id'] = requestParameters.accountId;
        }

        if (requestParameters.contactId !== undefined) {
            queryParameters['contact_id'] = requestParameters.contactId;
        }

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.includeDeletedData !== undefined) {
            queryParameters['include_deleted_data'] = requestParameters.includeDeletedData;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modified_after'] = (requestParameters.modifiedAfter as any).toISOString();
        }

        if (requestParameters.modifiedBefore !== undefined) {
            queryParameters['modified_before'] = (requestParameters.modifiedBefore as any).toISOString();
        }

        if (requestParameters.opportunityId !== undefined) {
            queryParameters['opportunity_id'] = requestParameters.opportunityId;
        }

        if (requestParameters.ownerId !== undefined) {
            queryParameters['owner_id'] = requestParameters.ownerId;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.remoteId !== undefined) {
            queryParameters['remote_id'] = requestParameters.remoteId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/notes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of `Note` objects.
     */
    async notesList(requestParameters: NotesListRequest): Promise<MergePaginatedResponse<Note>> {
        const response = await this.notesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns metadata for `Note` POSTs.
     */
    async notesMetaPostRetrieveRaw(requestParameters: NotesMetaPostRetrieveRequest): Promise<runtime.ApiResponse<MetaResponse>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling notesMetaPostRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/notes/meta/post`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaResponseFromJSON(jsonValue));
    }

    /**
     * Returns metadata for `Note` POSTs.
     */
    async notesMetaPostRetrieve(requestParameters: NotesMetaPostRetrieveRequest): Promise<MetaResponse> {
        const response = await this.notesMetaPostRetrieveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a `Note` object with the given `id`.
     */
    async notesRetrieveRaw(requestParameters: NotesRetrieveRequest): Promise<runtime.ApiResponse<Note>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling notesRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notesRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteFromJSON(jsonValue));
    }

    /**
     * Returns a `Note` object with the given `id`.
     */
    async notesRetrieve(requestParameters: NotesRetrieveRequest): Promise<Note> {
        const response = await this.notesRetrieveRaw(requestParameters);
        return await response.value();
    }

}
