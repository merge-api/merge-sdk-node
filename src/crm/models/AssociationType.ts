/* tslint:disable */
/* eslint-disable */
/**
 * Merge CRM API
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    AssociationSubType,
    AssociationSubTypeFromJSON,
    AssociationSubTypeFromJSONTyped,
    AssociationSubTypeToJSON,
    CardinalityEnum,
    CardinalityEnumFromJSON,
    CardinalityEnumFromJSONTyped,
    CardinalityEnumToJSON,
} from './';


/**
 * 
 * @export
 * @interface AssociationType
 */
export interface AssociationType {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AssociationType
     */
    readonly source_object_class?: { [key: string]: any; };
    /**
     * 
     * @type {Array<AssociationSubType>}
     * @memberof AssociationType
     */
    readonly target_object_classes?: Array<AssociationSubType> | JSONValue;
    /**
     * 
     * @type {string}
     * @memberof AssociationType
     */
    remote_key_name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AssociationType
     */
    display_name?: string | null;
    /**
     * 
     * @type {CardinalityEnum}
     * @memberof AssociationType
     */
    cardinality?: CardinalityEnum | null;
    /**
     * 
     * @type {boolean}
     * @memberof AssociationType
     */
    is_required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AssociationType
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof AssociationType
     */
    remote_id?: string | null;
}

export function AssociationTypeFromJSON(json: JSONValue): AssociationType | undefined {
    return AssociationTypeFromJSONTyped(json);
}

export function AssociationTypeFromJSONTyped(json: JSONValue): AssociationType | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'source_object_class': !exists(json, 'source_object_class') ? undefined : json['source_object_class'],
        'target_object_classes': !exists(json, 'target_object_classes') ? undefined : ((json['target_object_classes'] as Array<JSONValue>).map(AssociationSubTypeFromJSON)) as Array<AssociationSubType>,
        'remote_key_name': !exists(json, 'remote_key_name') ? undefined : json['remote_key_name'],
        'display_name': !exists(json, 'display_name') ? undefined : json['display_name'],
        'cardinality': !exists(json, 'cardinality') ? undefined : CardinalityEnumFromJSON(json['cardinality']) as CardinalityEnum,
        'is_required': !exists(json, 'is_required') ? undefined : json['is_required'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
    };
}

export function AssociationTypeToJSON(value?: AssociationType): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_key_name': value.remote_key_name,
        'display_name': value.display_name,
        'cardinality': CardinalityEnumToJSON(value.cardinality),
        'is_required': value.is_required,
        'remote_id': value.remote_id,
    };
}

