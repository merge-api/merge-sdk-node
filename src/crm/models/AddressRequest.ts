/* tslint:disable */
/* eslint-disable */
/**
 * Merge CRM API
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    AddressTypeEnum,
    AddressTypeEnumFromJSON,
    AddressTypeEnumFromJSONTyped,
    AddressTypeEnumToJSON,
    CountryEnum,
    CountryEnumFromJSON,
    CountryEnumFromJSONTyped,
    CountryEnumToJSON,
} from './';


/**
 * # The Address Object
 * ### Description
 * The `Address` object is used to represent an entity's address.
 * ### Usage Example
 * TODO
 * @export
 * @interface AddressRequest
 */
export interface AddressRequest {
    /**
     * Line 1 of the address's street.
     * @type {string}
     * @memberof AddressRequest
     */
    street_1?: string | null;
    /**
     * Line 2 of the address's street.
     * @type {string}
     * @memberof AddressRequest
     */
    street_2?: string | null;
    /**
     * The address's city.
     * @type {string}
     * @memberof AddressRequest
     */
    city?: string | null;
    /**
     * The address's state.
     * @type {string}
     * @memberof AddressRequest
     */
    state?: string | null;
    /**
     * The address's postal code.
     * @type {string}
     * @memberof AddressRequest
     */
    postal_code?: string | null;
    /**
     * The address's country.
     * @type {CountryEnum}
     * @memberof AddressRequest
     */
    country?: CountryEnum | null;
    /**
     * The address type.
     * @type {AddressTypeEnum}
     * @memberof AddressRequest
     */
    address_type?: AddressTypeEnum | null;
}

export function AddressRequestFromJSON(json: JSONValue): AddressRequest | undefined {
    return AddressRequestFromJSONTyped(json);
}

export function AddressRequestFromJSONTyped(json: JSONValue): AddressRequest | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'street_1': !exists(json, 'street_1') ? undefined : json['street_1'],
        'street_2': !exists(json, 'street_2') ? undefined : json['street_2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'postal_code': !exists(json, 'postal_code') ? undefined : json['postal_code'],
        'country': !exists(json, 'country') ? undefined : CountryEnumFromJSON(json['country']) as CountryEnum,
        'address_type': !exists(json, 'address_type') ? undefined : AddressTypeEnumFromJSON(json['address_type']) as AddressTypeEnum,
    };
}

export function AddressRequestToJSON(value?: AddressRequest): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'street_1': value.street_1,
        'street_2': value.street_2,
        'city': value.city,
        'state': value.state,
        'postal_code': value.postal_code,
        'country': CountryEnumToJSON(value.country),
        'address_type': AddressTypeEnumToJSON(value.address_type),
    };
}

