/* tslint:disable */
/* eslint-disable */
/**
 * Merge File Storage API
 * The unified API for building rich integrations with multiple File Storage platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    FileStorageFile,
    FileStorageFileFromJSON,
    FileStorageFileToJSON,
    FileStorageFileEndpointRequest,
    FileStorageFileEndpointRequestFromJSON,
    FileStorageFileEndpointRequestToJSON,
    FileStorageFileResponse,
    FileStorageFileResponseFromJSON,
    FileStorageFileResponseToJSON,
    MetaResponse,
    MetaResponseFromJSON,
    MetaResponseToJSON,
    
} from '../models';
import {
	MergePaginatedResponse,
	MergePaginatedResponseFromJSON,
	MergePaginatedResponseToJSON,
} from '../../merge_paginated_response';

import {
    MergeMetaRequest
} from '../../merge_meta_request';

export interface FilesCreateRequest {
    xAccountToken: string;
    fileStorageFileEndpointRequest: FileStorageFileEndpointRequest;
    isDebugMode?: boolean;
    runAsync?: boolean;
}

export interface FilesDownloadRetrieveRequest {
    xAccountToken: string;
    id: string;
}

export interface FilesListRequest {
    xAccountToken: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    expand?: Array<FilesListExpandEnum>;
    folderId?: string;
    includeDeletedData?: boolean;
    includeRemoteData?: boolean;
    modifiedAfter?: Date;
    modifiedBefore?: Date;
    name?: string | null;
    pageSize?: number;
    remoteId?: string | null;
}

export interface FilesMetaPostRetrieveRequest extends MergeMetaRequest {
    xAccountToken: string;
}

export interface FilesRetrieveRequest {
    xAccountToken: string;
    id: string;
    expand?: Array<FilesRetrieveExpandEnum>;
    includeRemoteData?: boolean;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     * Creates a `File` object with the given values.
     */
    async filesCreateRaw(requestParameters: FilesCreateRequest): Promise<runtime.ApiResponse<FileStorageFileResponse | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling filesCreate.');
        }

        if (requestParameters.fileStorageFileEndpointRequest === null || requestParameters.fileStorageFileEndpointRequest === undefined) {
            throw new runtime.RequiredError('fileStorageFileEndpointRequest','Required parameter requestParameters.fileStorageFileEndpointRequest was null or undefined when calling filesCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.isDebugMode !== undefined) {
            queryParameters['is_debug_mode'] = requestParameters.isDebugMode;
        }

        if (requestParameters.runAsync !== undefined) {
            queryParameters['run_async'] = requestParameters.runAsync;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/filestorage/v1/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileStorageFileEndpointRequestToJSON(requestParameters.fileStorageFileEndpointRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileStorageFileResponseFromJSON(jsonValue));
    }

    /**
     * Creates a `File` object with the given values.
     */
    async filesCreate(requestParameters: FilesCreateRequest): Promise<FileStorageFileResponse | undefined> {
        const response = await this.filesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a `File` object with the given `id`.
     */
    async filesDownloadRetrieveRaw(requestParameters: FilesDownloadRetrieveRequest): Promise<runtime.ApiResponse<Blob | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling filesDownloadRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling filesDownloadRetrieve.');
        }

        const queryParameters: any = {};


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/filestorage/v1/files/{id}/download`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns a `File` object with the given `id`.
     */
    async filesDownloadRetrieve(requestParameters: FilesDownloadRetrieveRequest): Promise<Blob | undefined> {
        const response = await this.filesDownloadRetrieveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of `File` objects.
     */
    async filesListRaw(requestParameters: FilesListRequest): Promise<runtime.ApiResponse<MergePaginatedResponse<File> | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling filesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.folderId !== undefined) {
            queryParameters['folder_id'] = requestParameters.folderId;
        }

        if (requestParameters.includeDeletedData !== undefined) {
            queryParameters['include_deleted_data'] = requestParameters.includeDeletedData;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modified_after'] = (requestParameters.modifiedAfter as any).toISOString();
        }

        if (requestParameters.modifiedBefore !== undefined) {
            queryParameters['modified_before'] = (requestParameters.modifiedBefore as any).toISOString();
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.remoteId !== undefined) {
            queryParameters['remote_id'] = requestParameters.remoteId;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/filestorage/v1/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePaginatedResponseFromJSON(jsonValue, FileFromJSON));
    }

    /**
     * Returns a list of `File` objects.
     */
    async filesList(requestParameters: FilesListRequest): Promise<MergePaginatedResponse<File> | undefined> {
        const response = await this.filesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns metadata for `FileStorageFile` POSTs.
     */
    async filesMetaPostRetrieveRaw(requestParameters: FilesMetaPostRetrieveRequest): Promise<runtime.ApiResponse<MetaResponse | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling filesMetaPostRetrieve.');
        }

        const queryParameters: any = {};


        if (requestParameters !== undefined) {
            Object.keys(requestParameters.misc_params_query).forEach((key) => {
                if (requestParameters.misc_params_query[key] !== undefined) {
                    queryParameters[key] = requestParameters.misc_params_query[key];
                }
            })
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/filestorage/v1/files/meta/post`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaResponseFromJSON(jsonValue));
    }

    /**
     * Returns metadata for `FileStorageFile` POSTs.
     */
    async filesMetaPostRetrieve(requestParameters: FilesMetaPostRetrieveRequest): Promise<MetaResponse | undefined> {
        const response = await this.filesMetaPostRetrieveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a `File` object with the given `id`.
     */
    async filesRetrieveRaw(requestParameters: FilesRetrieveRequest): Promise<runtime.ApiResponse<FileStorageFile | undefined>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling filesRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling filesRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }


        

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }



        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/filestorage/v1/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileStorageFileFromJSON(jsonValue));
    }

    /**
     * Returns a `File` object with the given `id`.
     */
    async filesRetrieve(requestParameters: FilesRetrieveRequest): Promise<FileStorageFile | undefined> {
        const response = await this.filesRetrieveRaw(requestParameters);
        return await response.value();
    }

}

/**
* @export
* @enum {string}
*/
export enum FilesListExpandEnum {
    Drive = 'drive',
    Folder = 'folder',
    Permissions = 'permissions'
}
/**
* @export
* @enum {string}
*/
export enum FilesRetrieveExpandEnum {
    Drive = 'drive',
    Folder = 'folder',
    Permissions = 'permissions'
}
