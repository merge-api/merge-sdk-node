/* tslint:disable */
/* eslint-disable */
/**
 * Merge File Storage API
 * The unified API for building rich integrations with multiple File Storage platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';

/**
 * # The User Object
 * ### Description
 * The `User` object is used to represent a user within the File Storage account.
 * ### Usage Example
 * Fetch from the `GET /api/filestorage/v1/users` endpoint and view their users.
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof User
     */
    remote_id?: string | null;
    /**
     * The user's name.
     * @type {string}
     * @memberof User
     */
    name?: string | null;
    /**
     * The user's email address. This is typically used to identify a user across linked accounts.
     * @type {string}
     * @memberof User
     */
    email_address?: string | null;
    /**
     * Whether the user is the one who linked this account.
     * @type {boolean}
     * @memberof User
     */
    is_me?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof User
     */
    readonly field_mappings?: { [key: string]: any; } | null;
    /**
     * This is the datetime that this object was last updated by Merge
     * @type {Date}
     * @memberof User
     */
    readonly modified_at?: Date;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof User
     */
    remote_data?: Array<{ [key: string]: any; }> | null;
}

export function UserFromJSON(json: JSONValue): User | undefined {
    return UserFromJSONTyped(json);
}

export function UserFromJSONTyped(json: JSONValue): User | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email_address': !exists(json, 'email_address') ? undefined : json['email_address'],
        'is_me': !exists(json, 'is_me') ? undefined : json['is_me'],
        'field_mappings': !exists(json, 'field_mappings') ? undefined : json['field_mappings'],
        'modified_at': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'remote_data': !exists(json, 'remote_data') ? undefined : json['remote_data'],
    };
}

export function UserToJSON(value?: User): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'name': value.name,
        'email_address': value.email_address,
        'is_me': value.is_me,
        'remote_data': value.remote_data,
    };
}

