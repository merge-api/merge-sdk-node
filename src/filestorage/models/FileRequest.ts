/* tslint:disable */
/* eslint-disable */
/**
 * Merge File Storage API
 * The unified API for building rich integrations with multiple File Storage platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';

/**
 * # The File Object
 * ### Description
 * The `File` object is used to represent a file in the workspace. The Object typically exists under a folder or drive, if it exists.
 * ### Usage Example
 * Fetch from the `GET /api/file-storage/v1/files` endpoint and view their files.
 * @export
 * @interface FileRequest
 */
export interface FileRequest {
    /**
     * The file's name.
     * @type {string}
     * @memberof FileRequest
     */
    name?: string | null;
    /**
     * The URL to access the file.
     * @type {string}
     * @memberof FileRequest
     */
    file_url?: string | null;
    /**
     * The file's size, in bytes.
     * @type {number}
     * @memberof FileRequest
     */
    size?: number | null;
    /**
     * The file's mime type.
     * @type {string}
     * @memberof FileRequest
     */
    mime_type?: string | null;
    /**
     * The file's description.
     * @type {string}
     * @memberof FileRequest
     */
    description?: string | null;
    /**
     * The folder that the file belongs to.
     * @type {string}
     * @memberof FileRequest
     */
    folder?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof FileRequest
     */
    integration_params?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof FileRequest
     */
    linked_account_params?: { [key: string]: any; } | null;
}

export function FileRequestFromJSON(json: JSONValue): FileRequest | undefined {
    return FileRequestFromJSONTyped(json);
}

export function FileRequestFromJSONTyped(json: JSONValue): FileRequest | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'file_url': !exists(json, 'file_url') ? undefined : json['file_url'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'mime_type': !exists(json, 'mime_type') ? undefined : json['mime_type'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'folder': !exists(json, 'folder') ? undefined : json['folder'],
        'integration_params': !exists(json, 'integration_params') ? undefined : json['integration_params'],
        'linked_account_params': !exists(json, 'linked_account_params') ? undefined : json['linked_account_params'],
    };
}

export function FileRequestToJSON(value?: FileRequest): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'name': value.name,
        'file_url': value.file_url,
        'size': value.size,
        'mime_type': value.mime_type,
        'description': value.description,
        'folder': value.folder,
        'integration_params': value.integration_params,
        'linked_account_params': value.linked_account_params,
    };
}

