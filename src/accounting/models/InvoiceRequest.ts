/* tslint:disable */
/* eslint-disable */
/**
 * Merge Accounting API
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    CurrencyEnum,
    CurrencyEnumFromJSON,
    CurrencyEnumFromJSONTyped,
    CurrencyEnumToJSON,
    InvoiceLineItemRequest,
    InvoiceLineItemRequestFromJSON,
    InvoiceLineItemRequestFromJSONTyped,
    InvoiceLineItemRequestToJSON,
    InvoiceTypeEnum,
    InvoiceTypeEnumFromJSON,
    InvoiceTypeEnumFromJSONTyped,
    InvoiceTypeEnumToJSON,
} from './';


/**
 * # The Invoice Object
 *     ### Description
 *     The `Invoice` object represents an itemized record of goods and/or services sold to a customer.
 * If type = accounts_payable `Invoice` is a bill, if type = accounts_receivable it's an invoice.
 * 
 *     ### Usage Example
 *     Fetch from the `LIST Invoices` endpoint and view a company's invoices.
 * @export
 * @interface InvoiceRequest
 */
export interface InvoiceRequest {
    /**
     * Whether the invoice is an accounts receivable or accounts payable. If `type` is `accounts_payable`, the invoice is a bill. If `type` is `accounts_receivable`, it is an invoice.
     * 
     * * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
     * * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
     * @type {InvoiceTypeEnum}
     * @memberof InvoiceRequest
     */
    type?: InvoiceTypeEnum | null;
    /**
     * The invoice's contact.
     * @type {string}
     * @memberof InvoiceRequest
     */
    contact?: string | JSONValue | null;
    /**
     * The invoice's number.
     * @type {string}
     * @memberof InvoiceRequest
     */
    number?: string | null;
    /**
     * The invoice's issue date.
     * @type {Date}
     * @memberof InvoiceRequest
     */
    issue_date?: Date | null;
    /**
     * The invoice's due date.
     * @type {Date}
     * @memberof InvoiceRequest
     */
    due_date?: Date | null;
    /**
     * The invoice's paid date.
     * @type {Date}
     * @memberof InvoiceRequest
     */
    paid_on_date?: Date | null;
    /**
     * The invoice's private note.
     * @type {string}
     * @memberof InvoiceRequest
     */
    memo?: string | null;
    /**
     * The company the invoice belongs to.
     * @type {string}
     * @memberof InvoiceRequest
     */
    company?: string | JSONValue | null;
    /**
     * The invoice's currency.
     * 
     * * `XUA` - ADB Unit of Account
     * * `AFN` - Afghan Afghani
     * * `AFA` - Afghan Afghani (1927–2002)
     * * `ALL` - Albanian Lek
     * * `ALK` - Albanian Lek (1946–1965)
     * * `DZD` - Algerian Dinar
     * * `ADP` - Andorran Peseta
     * * `AOA` - Angolan Kwanza
     * * `AOK` - Angolan Kwanza (1977–1991)
     * * `AON` - Angolan New Kwanza (1990–2000)
     * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
     * * `ARA` - Argentine Austral
     * * `ARS` - Argentine Peso
     * * `ARM` - Argentine Peso (1881–1970)
     * * `ARP` - Argentine Peso (1983–1985)
     * * `ARL` - Argentine Peso Ley (1970–1983)
     * * `AMD` - Armenian Dram
     * * `AWG` - Aruban Florin
     * * `AUD` - Australian Dollar
     * * `ATS` - Austrian Schilling
     * * `AZN` - Azerbaijani Manat
     * * `AZM` - Azerbaijani Manat (1993–2006)
     * * `BSD` - Bahamian Dollar
     * * `BHD` - Bahraini Dinar
     * * `BDT` - Bangladeshi Taka
     * * `BBD` - Barbadian Dollar
     * * `BYN` - Belarusian Ruble
     * * `BYB` - Belarusian Ruble (1994–1999)
     * * `BYR` - Belarusian Ruble (2000–2016)
     * * `BEF` - Belgian Franc
     * * `BEC` - Belgian Franc (convertible)
     * * `BEL` - Belgian Franc (financial)
     * * `BZD` - Belize Dollar
     * * `BMD` - Bermudan Dollar
     * * `BTN` - Bhutanese Ngultrum
     * * `BOB` - Bolivian Boliviano
     * * `BOL` - Bolivian Boliviano (1863–1963)
     * * `BOV` - Bolivian Mvdol
     * * `BOP` - Bolivian Peso
     * * `BAM` - Bosnia-Herzegovina Convertible Mark
     * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
     * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
     * * `BWP` - Botswanan Pula
     * * `BRC` - Brazilian Cruzado (1986–1989)
     * * `BRZ` - Brazilian Cruzeiro (1942–1967)
     * * `BRE` - Brazilian Cruzeiro (1990–1993)
     * * `BRR` - Brazilian Cruzeiro (1993–1994)
     * * `BRN` - Brazilian New Cruzado (1989–1990)
     * * `BRB` - Brazilian New Cruzeiro (1967–1986)
     * * `BRL` - Brazilian Real
     * * `GBP` - British Pound
     * * `BND` - Brunei Dollar
     * * `BGL` - Bulgarian Hard Lev
     * * `BGN` - Bulgarian Lev
     * * `BGO` - Bulgarian Lev (1879–1952)
     * * `BGM` - Bulgarian Socialist Lev
     * * `BUK` - Burmese Kyat
     * * `BIF` - Burundian Franc
     * * `XPF` - CFP Franc
     * * `KHR` - Cambodian Riel
     * * `CAD` - Canadian Dollar
     * * `CVE` - Cape Verdean Escudo
     * * `KYD` - Cayman Islands Dollar
     * * `XAF` - Central African CFA Franc
     * * `CLE` - Chilean Escudo
     * * `CLP` - Chilean Peso
     * * `CLF` - Chilean Unit of Account (UF)
     * * `CNX` - Chinese People’s Bank Dollar
     * * `CNY` - Chinese Yuan
     * * `CNH` - Chinese Yuan (offshore)
     * * `COP` - Colombian Peso
     * * `COU` - Colombian Real Value Unit
     * * `KMF` - Comorian Franc
     * * `CDF` - Congolese Franc
     * * `CRC` - Costa Rican Colón
     * * `HRD` - Croatian Dinar
     * * `HRK` - Croatian Kuna
     * * `CUC` - Cuban Convertible Peso
     * * `CUP` - Cuban Peso
     * * `CYP` - Cypriot Pound
     * * `CZK` - Czech Koruna
     * * `CSK` - Czechoslovak Hard Koruna
     * * `DKK` - Danish Krone
     * * `DJF` - Djiboutian Franc
     * * `DOP` - Dominican Peso
     * * `NLG` - Dutch Guilder
     * * `XCD` - East Caribbean Dollar
     * * `DDM` - East German Mark
     * * `ECS` - Ecuadorian Sucre
     * * `ECV` - Ecuadorian Unit of Constant Value
     * * `EGP` - Egyptian Pound
     * * `GQE` - Equatorial Guinean Ekwele
     * * `ERN` - Eritrean Nakfa
     * * `EEK` - Estonian Kroon
     * * `ETB` - Ethiopian Birr
     * * `EUR` - Euro
     * * `XBA` - European Composite Unit
     * * `XEU` - European Currency Unit
     * * `XBB` - European Monetary Unit
     * * `XBC` - European Unit of Account (XBC)
     * * `XBD` - European Unit of Account (XBD)
     * * `FKP` - Falkland Islands Pound
     * * `FJD` - Fijian Dollar
     * * `FIM` - Finnish Markka
     * * `FRF` - French Franc
     * * `XFO` - French Gold Franc
     * * `XFU` - French UIC-Franc
     * * `GMD` - Gambian Dalasi
     * * `GEK` - Georgian Kupon Larit
     * * `GEL` - Georgian Lari
     * * `DEM` - German Mark
     * * `GHS` - Ghanaian Cedi
     * * `GHC` - Ghanaian Cedi (1979–2007)
     * * `GIP` - Gibraltar Pound
     * * `XAU` - Gold
     * * `GRD` - Greek Drachma
     * * `GTQ` - Guatemalan Quetzal
     * * `GWP` - Guinea-Bissau Peso
     * * `GNF` - Guinean Franc
     * * `GNS` - Guinean Syli
     * * `GYD` - Guyanaese Dollar
     * * `HTG` - Haitian Gourde
     * * `HNL` - Honduran Lempira
     * * `HKD` - Hong Kong Dollar
     * * `HUF` - Hungarian Forint
     * * `IMP` - IMP
     * * `ISK` - Icelandic Króna
     * * `ISJ` - Icelandic Króna (1918–1981)
     * * `INR` - Indian Rupee
     * * `IDR` - Indonesian Rupiah
     * * `IRR` - Iranian Rial
     * * `IQD` - Iraqi Dinar
     * * `IEP` - Irish Pound
     * * `ILS` - Israeli New Shekel
     * * `ILP` - Israeli Pound
     * * `ILR` - Israeli Shekel (1980–1985)
     * * `ITL` - Italian Lira
     * * `JMD` - Jamaican Dollar
     * * `JPY` - Japanese Yen
     * * `JOD` - Jordanian Dinar
     * * `KZT` - Kazakhstani Tenge
     * * `KES` - Kenyan Shilling
     * * `KWD` - Kuwaiti Dinar
     * * `KGS` - Kyrgystani Som
     * * `LAK` - Laotian Kip
     * * `LVL` - Latvian Lats
     * * `LVR` - Latvian Ruble
     * * `LBP` - Lebanese Pound
     * * `LSL` - Lesotho Loti
     * * `LRD` - Liberian Dollar
     * * `LYD` - Libyan Dinar
     * * `LTL` - Lithuanian Litas
     * * `LTT` - Lithuanian Talonas
     * * `LUL` - Luxembourg Financial Franc
     * * `LUC` - Luxembourgian Convertible Franc
     * * `LUF` - Luxembourgian Franc
     * * `MOP` - Macanese Pataca
     * * `MKD` - Macedonian Denar
     * * `MKN` - Macedonian Denar (1992–1993)
     * * `MGA` - Malagasy Ariary
     * * `MGF` - Malagasy Franc
     * * `MWK` - Malawian Kwacha
     * * `MYR` - Malaysian Ringgit
     * * `MVR` - Maldivian Rufiyaa
     * * `MVP` - Maldivian Rupee (1947–1981)
     * * `MLF` - Malian Franc
     * * `MTL` - Maltese Lira
     * * `MTP` - Maltese Pound
     * * `MRU` - Mauritanian Ouguiya
     * * `MRO` - Mauritanian Ouguiya (1973–2017)
     * * `MUR` - Mauritian Rupee
     * * `MXV` - Mexican Investment Unit
     * * `MXN` - Mexican Peso
     * * `MXP` - Mexican Silver Peso (1861–1992)
     * * `MDC` - Moldovan Cupon
     * * `MDL` - Moldovan Leu
     * * `MCF` - Monegasque Franc
     * * `MNT` - Mongolian Tugrik
     * * `MAD` - Moroccan Dirham
     * * `MAF` - Moroccan Franc
     * * `MZE` - Mozambican Escudo
     * * `MZN` - Mozambican Metical
     * * `MZM` - Mozambican Metical (1980–2006)
     * * `MMK` - Myanmar Kyat
     * * `NAD` - Namibian Dollar
     * * `NPR` - Nepalese Rupee
     * * `ANG` - Netherlands Antillean Guilder
     * * `TWD` - New Taiwan Dollar
     * * `NZD` - New Zealand Dollar
     * * `NIO` - Nicaraguan Córdoba
     * * `NIC` - Nicaraguan Córdoba (1988–1991)
     * * `NGN` - Nigerian Naira
     * * `KPW` - North Korean Won
     * * `NOK` - Norwegian Krone
     * * `OMR` - Omani Rial
     * * `PKR` - Pakistani Rupee
     * * `XPD` - Palladium
     * * `PAB` - Panamanian Balboa
     * * `PGK` - Papua New Guinean Kina
     * * `PYG` - Paraguayan Guarani
     * * `PEI` - Peruvian Inti
     * * `PEN` - Peruvian Sol
     * * `PES` - Peruvian Sol (1863–1965)
     * * `PHP` - Philippine Peso
     * * `XPT` - Platinum
     * * `PLN` - Polish Zloty
     * * `PLZ` - Polish Zloty (1950–1995)
     * * `PTE` - Portuguese Escudo
     * * `GWE` - Portuguese Guinea Escudo
     * * `QAR` - Qatari Rial
     * * `XRE` - RINET Funds
     * * `RHD` - Rhodesian Dollar
     * * `RON` - Romanian Leu
     * * `ROL` - Romanian Leu (1952–2006)
     * * `RUB` - Russian Ruble
     * * `RUR` - Russian Ruble (1991–1998)
     * * `RWF` - Rwandan Franc
     * * `SVC` - Salvadoran Colón
     * * `WST` - Samoan Tala
     * * `SAR` - Saudi Riyal
     * * `RSD` - Serbian Dinar
     * * `CSD` - Serbian Dinar (2002–2006)
     * * `SCR` - Seychellois Rupee
     * * `SLL` - Sierra Leonean Leone
     * * `XAG` - Silver
     * * `SGD` - Singapore Dollar
     * * `SKK` - Slovak Koruna
     * * `SIT` - Slovenian Tolar
     * * `SBD` - Solomon Islands Dollar
     * * `SOS` - Somali Shilling
     * * `ZAR` - South African Rand
     * * `ZAL` - South African Rand (financial)
     * * `KRH` - South Korean Hwan (1953–1962)
     * * `KRW` - South Korean Won
     * * `KRO` - South Korean Won (1945–1953)
     * * `SSP` - South Sudanese Pound
     * * `SUR` - Soviet Rouble
     * * `ESP` - Spanish Peseta
     * * `ESA` - Spanish Peseta (A account)
     * * `ESB` - Spanish Peseta (convertible account)
     * * `XDR` - Special Drawing Rights
     * * `LKR` - Sri Lankan Rupee
     * * `SHP` - St. Helena Pound
     * * `XSU` - Sucre
     * * `SDD` - Sudanese Dinar (1992–2007)
     * * `SDG` - Sudanese Pound
     * * `SDP` - Sudanese Pound (1957–1998)
     * * `SRD` - Surinamese Dollar
     * * `SRG` - Surinamese Guilder
     * * `SZL` - Swazi Lilangeni
     * * `SEK` - Swedish Krona
     * * `CHF` - Swiss Franc
     * * `SYP` - Syrian Pound
     * * `STN` - São Tomé & Príncipe Dobra
     * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
     * * `TVD` - TVD
     * * `TJR` - Tajikistani Ruble
     * * `TJS` - Tajikistani Somoni
     * * `TZS` - Tanzanian Shilling
     * * `XTS` - Testing Currency Code
     * * `THB` - Thai Baht
     * * `XXX` - The codes assigned for transactions where no currency is involved
     * * `TPE` - Timorese Escudo
     * * `TOP` - Tongan Paʻanga
     * * `TTD` - Trinidad & Tobago Dollar
     * * `TND` - Tunisian Dinar
     * * `TRY` - Turkish Lira
     * * `TRL` - Turkish Lira (1922–2005)
     * * `TMT` - Turkmenistani Manat
     * * `TMM` - Turkmenistani Manat (1993–2009)
     * * `USD` - US Dollar
     * * `USN` - US Dollar (Next day)
     * * `USS` - US Dollar (Same day)
     * * `UGX` - Ugandan Shilling
     * * `UGS` - Ugandan Shilling (1966–1987)
     * * `UAH` - Ukrainian Hryvnia
     * * `UAK` - Ukrainian Karbovanets
     * * `AED` - United Arab Emirates Dirham
     * * `UYW` - Uruguayan Nominal Wage Index Unit
     * * `UYU` - Uruguayan Peso
     * * `UYP` - Uruguayan Peso (1975–1993)
     * * `UYI` - Uruguayan Peso (Indexed Units)
     * * `UZS` - Uzbekistani Som
     * * `VUV` - Vanuatu Vatu
     * * `VES` - Venezuelan Bolívar
     * * `VEB` - Venezuelan Bolívar (1871–2008)
     * * `VEF` - Venezuelan Bolívar (2008–2018)
     * * `VND` - Vietnamese Dong
     * * `VNN` - Vietnamese Dong (1978–1985)
     * * `CHE` - WIR Euro
     * * `CHW` - WIR Franc
     * * `XOF` - West African CFA Franc
     * * `YDD` - Yemeni Dinar
     * * `YER` - Yemeni Rial
     * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
     * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
     * * `YUM` - Yugoslavian New Dinar (1994–2002)
     * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
     * * `ZWN` - ZWN
     * * `ZRN` - Zairean New Zaire (1993–1998)
     * * `ZRZ` - Zairean Zaire (1971–1993)
     * * `ZMW` - Zambian Kwacha
     * * `ZMK` - Zambian Kwacha (1968–2012)
     * * `ZWD` - Zimbabwean Dollar (1980–2008)
     * * `ZWR` - Zimbabwean Dollar (2008)
     * * `ZWL` - Zimbabwean Dollar (2009)
     * @type {CurrencyEnum}
     * @memberof InvoiceRequest
     */
    currency?: CurrencyEnum | null;
    /**
     * The invoice's exchange rate.
     * @type {string}
     * @memberof InvoiceRequest
     */
    exchange_rate?: string | null;
    /**
     * The total discounts applied to the total cost.
     * @type {number}
     * @memberof InvoiceRequest
     */
    total_discount?: number | null;
    /**
     * The total amount being paid before taxes.
     * @type {number}
     * @memberof InvoiceRequest
     */
    sub_total?: number | null;
    /**
     * The total amount being paid in taxes.
     * @type {number}
     * @memberof InvoiceRequest
     */
    total_tax_amount?: number | null;
    /**
     * The invoice's total amount.
     * @type {number}
     * @memberof InvoiceRequest
     */
    total_amount?: number | null;
    /**
     * The invoice's remaining balance.
     * @type {number}
     * @memberof InvoiceRequest
     */
    balance?: number | null;
    /**
     * Array of `Payment` object IDs.
     * @type {Array<string>}
     * @memberof InvoiceRequest
     */
    payments?: Array<string> | JSONValue;
    /**
     * 
     * @type {Array<InvoiceLineItemRequest>}
     * @memberof InvoiceRequest
     */
    line_items?: Array<InvoiceLineItemRequest> | JSONValue;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof InvoiceRequest
     */
    integration_params?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof InvoiceRequest
     */
    linked_account_params?: { [key: string]: any; } | null;
}

export function InvoiceRequestFromJSON(json: JSONValue): InvoiceRequest | undefined {
    return InvoiceRequestFromJSONTyped(json);
}

export function InvoiceRequestFromJSONTyped(json: JSONValue): InvoiceRequest | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'type': !exists(json, 'type') ? undefined : InvoiceTypeEnumFromJSON(json['type']) as InvoiceTypeEnum,
        'contact': !exists(json, 'contact') ? undefined : json['contact'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'issue_date': !exists(json, 'issue_date') ? undefined : (json['issue_date'] === null ? null : new Date(json['issue_date'])),
        'due_date': !exists(json, 'due_date') ? undefined : (json['due_date'] === null ? null : new Date(json['due_date'])),
        'paid_on_date': !exists(json, 'paid_on_date') ? undefined : (json['paid_on_date'] === null ? null : new Date(json['paid_on_date'])),
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'currency': !exists(json, 'currency') ? undefined : CurrencyEnumFromJSON(json['currency']) as CurrencyEnum,
        'exchange_rate': !exists(json, 'exchange_rate') ? undefined : json['exchange_rate'],
        'total_discount': !exists(json, 'total_discount') ? undefined : json['total_discount'],
        'sub_total': !exists(json, 'sub_total') ? undefined : json['sub_total'],
        'total_tax_amount': !exists(json, 'total_tax_amount') ? undefined : json['total_tax_amount'],
        'total_amount': !exists(json, 'total_amount') ? undefined : json['total_amount'],
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'payments': !exists(json, 'payments') ? undefined : json['payments'],
        'line_items': !exists(json, 'line_items') ? undefined : ((json['line_items'] as Array<JSONValue>).map(InvoiceLineItemRequestFromJSON)) as Array<InvoiceLineItemRequest>,
        'integration_params': !exists(json, 'integration_params') ? undefined : json['integration_params'],
        'linked_account_params': !exists(json, 'linked_account_params') ? undefined : json['linked_account_params'],
    };
}

export function InvoiceRequestToJSON(value?: InvoiceRequest): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'type': InvoiceTypeEnumToJSON(value.type),
        'contact': value.contact,
        'number': value.number,
        'issue_date': value.issue_date === undefined ? undefined : (value.issue_date === null ? null : value.issue_date.toISOString()),
        'due_date': value.due_date === undefined ? undefined : (value.due_date === null ? null : value.due_date.toISOString()),
        'paid_on_date': value.paid_on_date === undefined ? undefined : (value.paid_on_date === null ? null : value.paid_on_date.toISOString()),
        'memo': value.memo,
        'company': value.company,
        'currency': CurrencyEnumToJSON(value.currency),
        'exchange_rate': value.exchange_rate,
        'total_discount': value.total_discount,
        'sub_total': value.sub_total,
        'total_tax_amount': value.total_tax_amount,
        'total_amount': value.total_amount,
        'balance': value.balance,
        'payments': value.payments,
        'line_items': value.line_items === undefined ? undefined : ((value.line_items as Array<any>).map(InvoiceLineItemRequestToJSON)),
        'integration_params': value.integration_params,
        'linked_account_params': value.linked_account_params,
    };
}

