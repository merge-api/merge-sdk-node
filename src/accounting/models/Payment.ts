/* tslint:disable */
/* eslint-disable */
/**
 * Merge Accounting API
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { JSONValue } from '../../merge_json'
import {
    RemoteData,
    RemoteDataFromJSON,
    RemoteDataFromJSONTyped,
    RemoteDataToJSON,
} from './';


/**
 * # The Payment Object
 * ### Description
 * The `Payment` object is used to represent a invoice's payment.
 * 
 * ### Usage Example
 * Fetch from the `GET Payment` endpoint and view an invoice's payment.
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Payment
     */
    remote_id?: string | null;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof Payment
     */
    readonly remote_data?: Array<RemoteData> | null;
    /**
     * The payment's transaction date.
     * @type {Date}
     * @memberof Payment
     */
    transaction_date?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    contact?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    account?: string | null;
    /**
     * The payment's total amount.
     * @type {number}
     * @memberof Payment
     */
    total_amount?: number | null;
    /**
     * When the third party's payment entry was updated.
     * @type {Date}
     * @memberof Payment
     */
    remote_updated_at?: Date | null;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof Payment
     */
    readonly remote_was_deleted?: boolean;
}

export function PaymentFromJSON(json: JSONValue): Payment {
    return PaymentFromJSONTyped(json);
}

export function PaymentFromJSONTyped(json: JSONValue): Payment {
    if ((json === undefined) || (json === null)) {
        return json;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<any>).map(RemoteDataFromJSON)),
        'transaction_date': !exists(json, 'transaction_date') ? undefined : (json['transaction_date'] === null ? null : new Date(json['transaction_date'])),
        'contact': !exists(json, 'contact') ? undefined : json['contact'],
        'account': !exists(json, 'account') ? undefined : json['account'],
        'total_amount': !exists(json, 'total_amount') ? undefined : json['total_amount'],
        'remote_updated_at': !exists(json, 'remote_updated_at') ? undefined : (json['remote_updated_at'] === null ? null : new Date(json['remote_updated_at'])),
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
    };
}

export function PaymentToJSON(value?: Payment | null): JSONValue {
    if (value === undefined || value === null) {
        return value;
    }

    return {
        
        'remote_id': value.remote_id,
        'transaction_date': value.transaction_date === undefined ? undefined : (value.transaction_date === null ? null : value.transaction_date.toISOString()),
        'contact': value.contact,
        'account': value.account,
        'total_amount': value.total_amount,
        'remote_updated_at': value.remote_updated_at === undefined ? undefined : (value.remote_updated_at === null ? null : value.remote_updated_at.toISOString()),
    };
}

