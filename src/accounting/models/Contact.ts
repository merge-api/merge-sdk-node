/* tslint:disable */
/* eslint-disable */
/**
 * Merge Accounting API
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    AccountingPhoneNumber,
    AccountingPhoneNumberFromJSON,
    AccountingPhoneNumberFromJSONTyped,
    AccountingPhoneNumberToJSON,
    
    Status7d1Enum,
    Status7d1EnumFromJSON,
    Status7d1EnumFromJSONTyped,
    Status7d1EnumToJSON,
} from './';
import {
	RemoteData,
	RemoteDataFromJSON,
	RemoteDataFromJSONTyped,
	RemoteDataToJSON,
} from '../../remote_data';


/**
 * # The Contact Object
 * ### Description
 * The `Contact` object is used to represent a Contact. This can be either a supplier or a customer.
 * 
 * ### Usage Example
 * Fetch from the `LIST Contacts` endpoint and view a company's contacts.
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Contact
     */
    remote_id?: string | null;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof Contact
     */
    readonly remote_data?: Array<RemoteData> | null;
    /**
     * The contact's name.
     * @type {string}
     * @memberof Contact
     */
    name?: string | null;
    /**
     * Whether the contact is a supplier.
     * @type {boolean}
     * @memberof Contact
     */
    is_supplier?: boolean | null;
    /**
     * Whether the contact is a customer.
     * @type {boolean}
     * @memberof Contact
     */
    is_customer?: boolean | null;
    /**
     * The contact's email address.
     * @type {string}
     * @memberof Contact
     */
    email_address?: string | null;
    /**
     * The contact's tax number.
     * @type {string}
     * @memberof Contact
     */
    tax_number?: string | null;
    /**
     * The contact's status
     * @type {Status7d1Enum}
     * @memberof Contact
     */
    status?: Status7d1Enum | null;
    /**
     * The currency the contact's transactions are in.
     * @type {string}
     * @memberof Contact
     */
    currency?: string | null;
    /**
     * When the third party's contact was updated.
     * @type {Date}
     * @memberof Contact
     */
    remote_updated_at?: Date | null;
    /**
     * The company the contact belongs to.
     * @type {string}
     * @memberof Contact
     */
    company?: string | null;
    /**
     * `Address` object IDs for the given `Contacts` object.
     * @type {Array<string>}
     * @memberof Contact
     */
    addresses?: Array<string>;
    /**
     * `AccountingPhoneNumber` object for the given `Contacts` object.
     * @type {Array<AccountingPhoneNumber>}
     * @memberof Contact
     */
    phone_numbers?: Array<AccountingPhoneNumber>;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof Contact
     */
    readonly remote_was_deleted?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Contact
     */
    readonly field_mappings?: { [key: string]: any; } | null;
}

export function ContactFromJSON(json: JSONValue): Contact | undefined {
    return ContactFromJSONTyped(json);
}

export function ContactFromJSONTyped(json: JSONValue): Contact | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<JSONValue>).map(RemoteDataFromJSON)) as Array<RemoteData>,
        'name': !exists(json, 'name') ? undefined : json['name'],
        'is_supplier': !exists(json, 'is_supplier') ? undefined : json['is_supplier'],
        'is_customer': !exists(json, 'is_customer') ? undefined : json['is_customer'],
        'email_address': !exists(json, 'email_address') ? undefined : json['email_address'],
        'tax_number': !exists(json, 'tax_number') ? undefined : json['tax_number'],
        'status': !exists(json, 'status') ? undefined : Status7d1EnumFromJSON(json['status']) as Status7d1Enum,
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'remote_updated_at': !exists(json, 'remote_updated_at') ? undefined : (json['remote_updated_at'] === null ? null : new Date(json['remote_updated_at'])),
        'company': !exists(json, 'company') ? undefined : json['company'],
        'addresses': !exists(json, 'addresses') ? undefined : json['addresses'],
        'phone_numbers': !exists(json, 'phone_numbers') ? undefined : ((json['phone_numbers'] as Array<JSONValue>).map(AccountingPhoneNumberFromJSON)) as Array<AccountingPhoneNumber>,
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
        'field_mappings': !exists(json, 'field_mappings') ? undefined : json['field_mappings'],
    };
}

export function ContactToJSON(value?: Contact): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'name': value.name,
        'is_supplier': value.is_supplier,
        'is_customer': value.is_customer,
        'email_address': value.email_address,
        'tax_number': value.tax_number,
        'status': Status7d1EnumToJSON(value.status),
        'currency': value.currency,
        'remote_updated_at': value.remote_updated_at === undefined ? undefined : (value.remote_updated_at === null ? null : value.remote_updated_at.toISOString()),
        'company': value.company,
        'addresses': value.addresses,
        'phone_numbers': value.phone_numbers === undefined ? undefined : ((value.phone_numbers as Array<any>).map(AccountingPhoneNumberToJSON)),
    };
}

