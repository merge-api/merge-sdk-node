/* tslint:disable */
/* eslint-disable */
/**
 * Merge Accounting API
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    AccountStatusEnum,
    AccountStatusEnumFromJSON,
    AccountStatusEnumFromJSONTyped,
    AccountStatusEnumToJSON,
    ClassificationEnum,
    ClassificationEnumFromJSON,
    ClassificationEnumFromJSONTyped,
    ClassificationEnumToJSON,
    CurrencyEnum,
    CurrencyEnumFromJSON,
    CurrencyEnumFromJSONTyped,
    CurrencyEnumToJSON,
    
} from './';
import {
	RemoteData,
	RemoteDataFromJSON,
	RemoteDataFromJSONTyped,
	RemoteDataToJSON,
} from '../../remote_data';


/**
 * # The Account Object
 * ### Description
 * The `Account` object is what businesses use to track transactions. Accountants often call accounts "ledgers".
 * 
 * ### Usage Example
 * Fetch from the `LIST Accounts` endpoint and view a company's accounts.
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Account
     */
    remote_id?: string | null;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof Account
     */
    readonly remote_data?: Array<RemoteData> | null;
    /**
     * The account's name.
     * @type {string}
     * @memberof Account
     */
    name?: string | null;
    /**
     * The account's description.
     * @type {string}
     * @memberof Account
     */
    description?: string | null;
    /**
     * The account's classification.
     * @type {ClassificationEnum}
     * @memberof Account
     */
    classification?: ClassificationEnum | null;
    /**
     * The account's type.
     * @type {string}
     * @memberof Account
     */
    type?: string | null;
    /**
     * The account's status.
     * @type {AccountStatusEnum}
     * @memberof Account
     */
    status?: AccountStatusEnum | null;
    /**
     * The account's current balance.
     * @type {number}
     * @memberof Account
     */
    current_balance?: number | null;
    /**
     * The account's currency.
     * @type {CurrencyEnum}
     * @memberof Account
     */
    currency?: CurrencyEnum | null;
    /**
     * The account's number.
     * @type {string}
     * @memberof Account
     */
    account_number?: string | null;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof Account
     */
    readonly remote_was_deleted?: boolean;
}

export function AccountFromJSON(json: JSONValue): Account | undefined {
    return AccountFromJSONTyped(json);
}

export function AccountFromJSONTyped(json: JSONValue): Account | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<JSONValue>).map(RemoteDataFromJSON)) as Array<RemoteData>,
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'classification': !exists(json, 'classification') ? undefined : ClassificationEnumFromJSON(json['classification']) as ClassificationEnum,
        'type': !exists(json, 'type') ? undefined : json['type'],
        'status': !exists(json, 'status') ? undefined : AccountStatusEnumFromJSON(json['status']) as AccountStatusEnum,
        'current_balance': !exists(json, 'current_balance') ? undefined : json['current_balance'],
        'currency': !exists(json, 'currency') ? undefined : CurrencyEnumFromJSON(json['currency']) as CurrencyEnum,
        'account_number': !exists(json, 'account_number') ? undefined : json['account_number'],
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
    };
}

export function AccountToJSON(value?: Account): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'name': value.name,
        'description': value.description,
        'classification': ClassificationEnumToJSON(value.classification),
        'type': value.type,
        'status': AccountStatusEnumToJSON(value.status),
        'current_balance': value.current_balance,
        'currency': CurrencyEnumToJSON(value.currency),
        'account_number': value.account_number,
    };
}

