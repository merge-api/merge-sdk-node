/* tslint:disable */
/* eslint-disable */
/**
 * Merge Accounting API
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    CurrencyEnum,
    CurrencyEnumFromJSON,
    CurrencyEnumFromJSONTyped,
    CurrencyEnumToJSON,
    ExpenseLineRequest,
    ExpenseLineRequestFromJSON,
    ExpenseLineRequestFromJSONTyped,
    ExpenseLineRequestToJSON,
} from './';


/**
 * # The Expense Object
 * ### Description
 * The `Expense` object is used to represent a purchase made from a business which can be made with a check, credit card, or cash. Each expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
 * 
 * ### Usage Example
 * Fetch from the `GET Expense` endpoint and view a company's expense.
 * @export
 * @interface ExpenseRequest
 */
export interface ExpenseRequest {
    /**
     * When the transaction occurred.
     * @type {Date}
     * @memberof ExpenseRequest
     */
    transaction_date?: Date | null;
    /**
     * The expense's payment account.
     * @type {string}
     * @memberof ExpenseRequest
     */
    account?: string | JSONValue | null;
    /**
     * The expense's contact.
     * @type {string}
     * @memberof ExpenseRequest
     */
    contact?: string | JSONValue | null;
    /**
     * The expense's total amount.
     * @type {number}
     * @memberof ExpenseRequest
     */
    total_amount?: number | null;
    /**
     * The expense's currency.
     * @type {CurrencyEnum}
     * @memberof ExpenseRequest
     */
    currency?: CurrencyEnum | null;
    /**
     * The expense's exchange rate.
     * @type {string}
     * @memberof ExpenseRequest
     */
    exchange_rate?: string | null;
    /**
     * The company the expense belongs to.
     * @type {string}
     * @memberof ExpenseRequest
     */
    company?: string | JSONValue | null;
    /**
     * The expense's private note.
     * @type {string}
     * @memberof ExpenseRequest
     */
    memo?: string | null;
    /**
     * 
     * @type {Array<ExpenseLineRequest>}
     * @memberof ExpenseRequest
     */
    lines?: Array<ExpenseLineRequest>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ExpenseRequest
     */
    integration_params?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ExpenseRequest
     */
    linked_account_params?: { [key: string]: any; } | null;
}

export function ExpenseRequestFromJSON(json: JSONValue): ExpenseRequest | undefined {
    return ExpenseRequestFromJSONTyped(json);
}

export function ExpenseRequestFromJSONTyped(json: JSONValue): ExpenseRequest | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'transaction_date': !exists(json, 'transaction_date') ? undefined : (json['transaction_date'] === null ? null : new Date(json['transaction_date'])),
        'account': !exists(json, 'account') ? undefined : json['account'],
        'contact': !exists(json, 'contact') ? undefined : json['contact'],
        'total_amount': !exists(json, 'total_amount') ? undefined : json['total_amount'],
        'currency': !exists(json, 'currency') ? undefined : CurrencyEnumFromJSON(json['currency']) as CurrencyEnum,
        'exchange_rate': !exists(json, 'exchange_rate') ? undefined : json['exchange_rate'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'lines': !exists(json, 'lines') ? undefined : ((json['lines'] as Array<JSONValue>).map(ExpenseLineRequestFromJSON)) as Array<ExpenseLineRequest>,
        'integration_params': !exists(json, 'integration_params') ? undefined : json['integration_params'],
        'linked_account_params': !exists(json, 'linked_account_params') ? undefined : json['linked_account_params'],
    };
}

export function ExpenseRequestToJSON(value?: ExpenseRequest): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'transaction_date': value.transaction_date === undefined ? undefined : (value.transaction_date === null ? null : value.transaction_date.toISOString()),
        'account': value.account,
        'contact': value.contact,
        'total_amount': value.total_amount,
        'currency': CurrencyEnumToJSON(value.currency),
        'exchange_rate': value.exchange_rate,
        'company': value.company,
        'memo': value.memo,
        'lines': value.lines === undefined ? undefined : ((value.lines as Array<any>).map(ExpenseLineRequestToJSON)),
        'integration_params': value.integration_params,
        'linked_account_params': value.linked_account_params,
    };
}

