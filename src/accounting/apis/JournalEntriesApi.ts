/* tslint:disable */
/* eslint-disable */
/**
 * Merge Accounting API
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    JournalEntry,
    JournalEntryFromJSON,
    JournalEntryToJSON,
    JournalEntryEndpointRequest,
    JournalEntryEndpointRequestFromJSON,
    JournalEntryEndpointRequestToJSON,
    JournalEntryResponse,
    JournalEntryResponseFromJSON,
    JournalEntryResponseToJSON,
    MetaResponse,
    MetaResponseFromJSON,
    MetaResponseToJSON,
    
} from '../models';
import {
	MergePaginatedResponse,
	MergePaginatedResponseFromJSON,
	MergePaginatedResponseToJSON,
} from '../../merge_paginated_response';

export interface JournalEntriesCreateRequest {
    journalEntryEndpointRequest: JournalEntryEndpointRequest;
    isDebugMode?: boolean;
    runAsync?: boolean;
}

export interface JournalEntriesListRequest {
    companyId?: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    expand?: JournalEntriesListExpandEnum;
    includeDeletedData?: boolean;
    includeRemoteData?: boolean;
    modifiedAfter?: Date;
    modifiedBefore?: Date;
    pageSize?: number;
    remoteId?: string | null;
}

export interface JournalEntriesRetrieveRequest {
    id: string;
    expand?: JournalEntriesRetrieveExpandEnum;
    includeRemoteData?: boolean;
}

/**
 * 
 */
export class JournalEntriesApi extends runtime.BaseAPI {

    /**
     * Creates a `JournalEntry` object with the given values.
     */
    async journalEntriesCreateRaw(requestParameters: JournalEntriesCreateRequest): Promise<runtime.ApiResponse<JournalEntryResponse | undefined>> {
        if (requestParameters.journalEntryEndpointRequest === null || requestParameters.journalEntryEndpointRequest === undefined) {
            throw new runtime.RequiredError('journalEntryEndpointRequest','Required parameter requestParameters.journalEntryEndpointRequest was null or undefined when calling journalEntriesCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.isDebugMode !== undefined) {
            queryParameters['is_debug_mode'] = requestParameters.isDebugMode;
        }

        if (requestParameters.runAsync !== undefined) {
            queryParameters['run_async'] = requestParameters.runAsync;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; // bearerAuth authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/accounting/v1/journal-entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JournalEntryEndpointRequestToJSON(requestParameters.journalEntryEndpointRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JournalEntryResponseFromJSON(jsonValue));
    }

    /**
     * Creates a `JournalEntry` object with the given values.
     */
    async journalEntriesCreate(requestParameters: JournalEntriesCreateRequest): Promise<JournalEntryResponse | undefined> {
        const response = await this.journalEntriesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of `JournalEntry` objects.
     */
    async journalEntriesListRaw(requestParameters: JournalEntriesListRequest): Promise<runtime.ApiResponse<MergePaginatedResponse<JournalEntry> | undefined>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.includeDeletedData !== undefined) {
            queryParameters['include_deleted_data'] = requestParameters.includeDeletedData;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modified_after'] = (requestParameters.modifiedAfter as any).toISOString();
        }

        if (requestParameters.modifiedBefore !== undefined) {
            queryParameters['modified_before'] = (requestParameters.modifiedBefore as any).toISOString();
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.remoteId !== undefined) {
            queryParameters['remote_id'] = requestParameters.remoteId;
        }

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; // bearerAuth authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/accounting/v1/journal-entries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of `JournalEntry` objects.
     */
    async journalEntriesList(requestParameters: JournalEntriesListRequest): Promise<MergePaginatedResponse<JournalEntry> | undefined> {
        const response = await this.journalEntriesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns metadata for `JournalEntry` POSTs.
     */
    async journalEntriesMetaPostRetrieveRaw(): Promise<runtime.ApiResponse<MetaResponse | undefined>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; // bearerAuth authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/accounting/v1/journal-entries/meta/post`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaResponseFromJSON(jsonValue));
    }

    /**
     * Returns metadata for `JournalEntry` POSTs.
     */
    async journalEntriesMetaPostRetrieve(): Promise<MetaResponse | undefined> {
        const response = await this.journalEntriesMetaPostRetrieveRaw();
        return await response.value();
    }

    /**
     * Returns a `JournalEntry` object with the given `id`.
     */
    async journalEntriesRetrieveRaw(requestParameters: JournalEntriesRetrieveRequest): Promise<runtime.ApiResponse<JournalEntry | undefined>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling journalEntriesRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; // bearerAuth authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/accounting/v1/journal-entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JournalEntryFromJSON(jsonValue));
    }

    /**
     * Returns a `JournalEntry` object with the given `id`.
     */
    async journalEntriesRetrieve(requestParameters: JournalEntriesRetrieveRequest): Promise<JournalEntry | undefined> {
        const response = await this.journalEntriesRetrieveRaw(requestParameters);
        return await response.value();
    }

}

/**
* @export
* @enum {string}
*/
export enum JournalEntriesListExpandEnum {
    Lines = 'lines',
    Linespayments = 'lines,payments',
    Payments = 'payments'
}
/**
* @export
* @enum {string}
*/
export enum JournalEntriesRetrieveExpandEnum {
    Lines = 'lines',
    Linespayments = 'lines,payments',
    Payments = 'payments'
}
