/* tslint:disable */
/* eslint-disable */
/**
 * Merge Ticketing API
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    PriorityEnum,
    PriorityEnumFromJSON,
    PriorityEnumFromJSONTyped,
    PriorityEnumToJSON,
    TicketStatusEnum,
    TicketStatusEnumFromJSON,
    TicketStatusEnumFromJSONTyped,
    TicketStatusEnumToJSON,
} from './';


/**
 * # The Ticket Object
 * ### Description
 * The `Ticket` object is used to represent a ticket or a task within a system.
 * 
 * ### Usage Example
 * TODO
 * @export
 * @interface PatchedTicketRequest
 */
export interface PatchedTicketRequest {
    /**
     * The ticket's name.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    name?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTicketRequest
     */
    assignees?: Array<string>;
    /**
     * The user who created this ticket.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    creator?: string | null;
    /**
     * The ticket's due date.
     * @type {Date}
     * @memberof PatchedTicketRequest
     */
    due_date?: Date | null;
    /**
     * The current status of the ticket.
     * @type {TicketStatusEnum}
     * @memberof PatchedTicketRequest
     */
    status?: TicketStatusEnum | null;
    /**
     * The ticketâ€™s description. HTML version of description is mapped if supported by the third-party platform.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    description?: string | null;
    /**
     * The project the ticket belongs to.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    project?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTicketRequest
     */
    collections?: Array<string>;
    /**
     * The ticket's type.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    ticket_type?: string | null;
    /**
     * The account associated with the ticket.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    account?: string | null;
    /**
     * The contact associated with the ticket.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    contact?: string | null;
    /**
     * The ticket's parent ticket.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    parent_ticket?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTicketRequest
     */
    tags?: Array<string>;
    /**
     * When the third party's ticket was created.
     * @type {Date}
     * @memberof PatchedTicketRequest
     */
    remote_created_at?: Date | null;
    /**
     * When the third party's ticket was updated.
     * @type {Date}
     * @memberof PatchedTicketRequest
     */
    remote_updated_at?: Date | null;
    /**
     * When the ticket was completed.
     * @type {Date}
     * @memberof PatchedTicketRequest
     */
    completed_at?: Date | null;
    /**
     * The 3rd party url of the Ticket.
     * @type {string}
     * @memberof PatchedTicketRequest
     */
    ticket_url?: string | null;
    /**
     * The priority or urgency of the Ticket. Possible values include: URGENT, HIGH, NORMAL, LOW - in cases where there is no clear mapping - the original value passed through.
     * @type {PriorityEnum}
     * @memberof PatchedTicketRequest
     */
    priority?: PriorityEnum | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedTicketRequest
     */
    integration_params?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedTicketRequest
     */
    linked_account_params?: { [key: string]: any; } | null;
}

export function PatchedTicketRequestFromJSON(json: JSONValue): PatchedTicketRequest | undefined {
    return PatchedTicketRequestFromJSONTyped(json);
}

export function PatchedTicketRequestFromJSONTyped(json: JSONValue): PatchedTicketRequest | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'assignees': !exists(json, 'assignees') ? undefined : json['assignees'],
        'creator': !exists(json, 'creator') ? undefined : json['creator'],
        'due_date': !exists(json, 'due_date') ? undefined : (json['due_date'] === null ? null : new Date(json['due_date'])),
        'status': !exists(json, 'status') ? undefined : TicketStatusEnumFromJSON(json['status']) as TicketStatusEnum,
        'description': !exists(json, 'description') ? undefined : json['description'],
        'project': !exists(json, 'project') ? undefined : json['project'],
        'collections': !exists(json, 'collections') ? undefined : json['collections'],
        'ticket_type': !exists(json, 'ticket_type') ? undefined : json['ticket_type'],
        'account': !exists(json, 'account') ? undefined : json['account'],
        'contact': !exists(json, 'contact') ? undefined : json['contact'],
        'parent_ticket': !exists(json, 'parent_ticket') ? undefined : json['parent_ticket'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'remote_created_at': !exists(json, 'remote_created_at') ? undefined : (json['remote_created_at'] === null ? null : new Date(json['remote_created_at'])),
        'remote_updated_at': !exists(json, 'remote_updated_at') ? undefined : (json['remote_updated_at'] === null ? null : new Date(json['remote_updated_at'])),
        'completed_at': !exists(json, 'completed_at') ? undefined : (json['completed_at'] === null ? null : new Date(json['completed_at'])),
        'ticket_url': !exists(json, 'ticket_url') ? undefined : json['ticket_url'],
        'priority': !exists(json, 'priority') ? undefined : PriorityEnumFromJSON(json['priority']) as PriorityEnum,
        'integration_params': !exists(json, 'integration_params') ? undefined : json['integration_params'],
        'linked_account_params': !exists(json, 'linked_account_params') ? undefined : json['linked_account_params'],
    };
}

export function PatchedTicketRequestToJSON(value?: PatchedTicketRequest): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'name': value.name,
        'assignees': value.assignees,
        'creator': value.creator,
        'due_date': value.due_date === undefined ? undefined : (value.due_date === null ? null : value.due_date.toISOString()),
        'status': TicketStatusEnumToJSON(value.status),
        'description': value.description,
        'project': value.project,
        'collections': value.collections,
        'ticket_type': value.ticket_type,
        'account': value.account,
        'contact': value.contact,
        'parent_ticket': value.parent_ticket,
        'tags': value.tags,
        'remote_created_at': value.remote_created_at === undefined ? undefined : (value.remote_created_at === null ? null : value.remote_created_at.toISOString()),
        'remote_updated_at': value.remote_updated_at === undefined ? undefined : (value.remote_updated_at === null ? null : value.remote_updated_at.toISOString()),
        'completed_at': value.completed_at === undefined ? undefined : (value.completed_at === null ? null : value.completed_at.toISOString()),
        'ticket_url': value.ticket_url,
        'priority': PriorityEnumToJSON(value.priority),
        'integration_params': value.integration_params,
        'linked_account_params': value.linked_account_params,
    };
}

