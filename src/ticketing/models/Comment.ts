/* tslint:disable */
/* eslint-disable */
/**
 * Merge Ticketing API
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    
} from './';
import {
	RemoteData,
	RemoteDataFromJSON,
	RemoteDataFromJSONTyped,
	RemoteDataToJSON,
} from '../../remote_data';


/**
 * # The Comment Object
 * ### Description
 * The `Comment` object is used to represent a comment on a ticket.
 * 
 * ### Usage Example
 * TODO
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Comment
     */
    remote_id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    user?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    contact?: string | null;
    /**
     * The comment's text body.
     * @type {string}
     * @memberof Comment
     */
    body?: string | null;
    /**
     * The comment's text body formatted as html.
     * @type {string}
     * @memberof Comment
     */
    html_body?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    ticket?: string | null;
    /**
     * Whether or not the comment is internal.
     * @type {boolean}
     * @memberof Comment
     */
    is_private?: boolean | null;
    /**
     * When the third party's comment was created.
     * @type {Date}
     * @memberof Comment
     */
    remote_created_at?: Date | null;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof Comment
     */
    readonly remote_data?: Array<RemoteData> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Comment
     */
    readonly remote_was_deleted?: boolean;
}

export function CommentFromJSON(json: JSONValue): Comment | undefined {
    return CommentFromJSONTyped(json);
}

export function CommentFromJSONTyped(json: JSONValue): Comment | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'contact': !exists(json, 'contact') ? undefined : json['contact'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'html_body': !exists(json, 'html_body') ? undefined : json['html_body'],
        'ticket': !exists(json, 'ticket') ? undefined : json['ticket'],
        'is_private': !exists(json, 'is_private') ? undefined : json['is_private'],
        'remote_created_at': !exists(json, 'remote_created_at') ? undefined : (json['remote_created_at'] === null ? null : new Date(json['remote_created_at'])),
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<JSONValue>).map(RemoteDataFromJSON)) as Array<RemoteData>,
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
    };
}

export function CommentToJSON(value?: Comment): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'user': value.user,
        'contact': value.contact,
        'body': value.body,
        'html_body': value.html_body,
        'ticket': value.ticket,
        'is_private': value.is_private,
        'remote_created_at': value.remote_created_at === undefined ? undefined : (value.remote_created_at === null ? null : value.remote_created_at.toISOString()),
    };
}

