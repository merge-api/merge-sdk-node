/* tslint:disable */
/* eslint-disable */
/**
 * Merge Ticketing API
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WebhookReceiver,
    WebhookReceiverFromJSON,
    WebhookReceiverToJSON,
    WebhookReceiverRequest,
    WebhookReceiverRequestFromJSON,
    WebhookReceiverRequestToJSON,
} from '../models';

export interface WebhookReceiversCreateRequest {
    xAccountToken: string;
    webhookReceiverRequest: WebhookReceiverRequest;
}

export interface WebhookReceiversListRequest {
    xAccountToken: string;
}

/**
 * 
 */
export class WebhookReceiversApi extends runtime.BaseAPI {

    /**
     * Creates a `WebhookReceiver` object with the given values.
     */
    async webhookReceiversCreateRaw(requestParameters: WebhookReceiversCreateRequest): Promise<runtime.ApiResponse<WebhookReceiver>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling webhookReceiversCreate.');
        }

        if (requestParameters.webhookReceiverRequest === null || requestParameters.webhookReceiverRequest === undefined) {
            throw new runtime.RequiredError('webhookReceiverRequest','Required parameter requestParameters.webhookReceiverRequest was null or undefined when calling webhookReceiversCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/webhook-receivers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookReceiverRequestToJSON(requestParameters.webhookReceiverRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookReceiverFromJSON(jsonValue));
    }

    /**
     * Creates a `WebhookReceiver` object with the given values.
     */
    async webhookReceiversCreate(requestParameters: WebhookReceiversCreateRequest): Promise<WebhookReceiver> {
        const response = await this.webhookReceiversCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of `WebhookReceiver` objects.
     */
    async webhookReceiversListRaw(requestParameters: WebhookReceiversListRequest): Promise<runtime.ApiResponse<Array<WebhookReceiver>>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling webhookReceiversList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/webhook-receivers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebhookReceiverFromJSON));
    }

    /**
     * Returns a list of `WebhookReceiver` objects.
     */
    async webhookReceiversList(requestParameters: WebhookReceiversListRequest): Promise<Array<WebhookReceiver>> {
        const response = await this.webhookReceiversListRaw(requestParameters);
        return await response.value();
    }

}
