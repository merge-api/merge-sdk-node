/* tslint:disable */
/* eslint-disable */
/**
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    Candidate,
    CandidateFromJSON,
    CandidateToJSON,
    CandidateEndpointRequest,
    CandidateEndpointRequestFromJSON,
    CandidateEndpointRequestToJSON,
    CandidateResponse,
    CandidateResponseFromJSON,
    CandidateResponseToJSON,
    IgnoreCommonModel,
    IgnoreCommonModelFromJSON,
    IgnoreCommonModelToJSON,
    IgnoreCommonModelRequest,
    IgnoreCommonModelRequestFromJSON,
    IgnoreCommonModelRequestToJSON,
    MetaResponse,
    MetaResponseFromJSON,
    MetaResponseToJSON,
    
} from '../models';
import {
	MergePaginatedResponse,
	MergePaginatedResponseFromJSON,
	MergePaginatedResponseToJSON,
} from '../../merge_paginated_response';

export interface CandidatesCreateRequest {
    xAccountToken: string;
    candidateEndpointRequest: CandidateEndpointRequest;
    isDebugMode?: boolean;
    runAsync?: boolean;
}

export interface CandidatesIgnoreCreateRequest {
    xAccountToken: string;
    modelId: string;
    ignoreCommonModelRequest: IgnoreCommonModelRequest;
}

export interface CandidatesListRequest {
    xAccountToken: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    firstName?: string | null;
    includeDeletedData?: boolean;
    includeRemoteData?: boolean;
    lastName?: string | null;
    modifiedAfter?: Date;
    modifiedBefore?: Date;
    pageSize?: number;
    remoteId?: string | null;
}

export interface CandidatesMetaPostRetrieveRequest {
    xAccountToken: string;
}

export interface CandidatesRetrieveRequest {
    xAccountToken: string;
    id: string;
    includeRemoteData?: boolean;
}

/**
 * 
 */
export class CandidatesApi extends runtime.BaseAPI {

    /**
     * Creates a `Candidate` object with the given values.
     */
    async candidatesCreateRaw(requestParameters: CandidatesCreateRequest): Promise<runtime.ApiResponse<CandidateResponse>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling candidatesCreate.');
        }

        if (requestParameters.candidateEndpointRequest === null || requestParameters.candidateEndpointRequest === undefined) {
            throw new runtime.RequiredError('candidateEndpointRequest','Required parameter requestParameters.candidateEndpointRequest was null or undefined when calling candidatesCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.isDebugMode !== undefined) {
            queryParameters['is_debug_mode'] = requestParameters.isDebugMode;
        }

        if (requestParameters.runAsync !== undefined) {
            queryParameters['run_async'] = requestParameters.runAsync;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/candidates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CandidateEndpointRequestToJSON(requestParameters.candidateEndpointRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CandidateResponseFromJSON(jsonValue));
    }

    /**
     * Creates a `Candidate` object with the given values.
     */
    async candidatesCreate(requestParameters: CandidatesCreateRequest): Promise<CandidateResponse> {
        const response = await this.candidatesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The \"reason\" and \"message\" fields in the request body will be stored for audit purposes.
     */
    async candidatesIgnoreCreateRaw(requestParameters: CandidatesIgnoreCreateRequest): Promise<runtime.ApiResponse<IgnoreCommonModel>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling candidatesIgnoreCreate.');
        }

        if (requestParameters.modelId === null || requestParameters.modelId === undefined) {
            throw new runtime.RequiredError('modelId','Required parameter requestParameters.modelId was null or undefined when calling candidatesIgnoreCreate.');
        }

        if (requestParameters.ignoreCommonModelRequest === null || requestParameters.ignoreCommonModelRequest === undefined) {
            throw new runtime.RequiredError('ignoreCommonModelRequest','Required parameter requestParameters.ignoreCommonModelRequest was null or undefined when calling candidatesIgnoreCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/candidates/ignore/{model_id}`.replace(`{${"model_id"}}`, encodeURIComponent(String(requestParameters.modelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IgnoreCommonModelRequestToJSON(requestParameters.ignoreCommonModelRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IgnoreCommonModelFromJSON(jsonValue));
    }

    /**
     * Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The \"reason\" and \"message\" fields in the request body will be stored for audit purposes.
     */
    async candidatesIgnoreCreate(requestParameters: CandidatesIgnoreCreateRequest): Promise<IgnoreCommonModel> {
        const response = await this.candidatesIgnoreCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of `Candidate` objects.
     */
    async candidatesListRaw(requestParameters: CandidatesListRequest): Promise<runtime.ApiResponse<MergePaginatedResponse<Candidate>>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling candidatesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['first_name'] = requestParameters.firstName;
        }

        if (requestParameters.includeDeletedData !== undefined) {
            queryParameters['include_deleted_data'] = requestParameters.includeDeletedData;
        }

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['last_name'] = requestParameters.lastName;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modified_after'] = (requestParameters.modifiedAfter as any).toISOString();
        }

        if (requestParameters.modifiedBefore !== undefined) {
            queryParameters['modified_before'] = (requestParameters.modifiedBefore as any).toISOString();
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.remoteId !== undefined) {
            queryParameters['remote_id'] = requestParameters.remoteId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/candidates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of `Candidate` objects.
     */
    async candidatesList(requestParameters: CandidatesListRequest): Promise<MergePaginatedResponse<Candidate>> {
        const response = await this.candidatesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns metadata for `Candidate` POSTs.
     */
    async candidatesMetaPostRetrieveRaw(requestParameters: CandidatesMetaPostRetrieveRequest): Promise<runtime.ApiResponse<MetaResponse>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling candidatesMetaPostRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/candidates/meta/post`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaResponseFromJSON(jsonValue));
    }

    /**
     * Returns metadata for `Candidate` POSTs.
     */
    async candidatesMetaPostRetrieve(requestParameters: CandidatesMetaPostRetrieveRequest): Promise<MetaResponse> {
        const response = await this.candidatesMetaPostRetrieveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a `Candidate` object with the given `id`.
     */
    async candidatesRetrieveRaw(requestParameters: CandidatesRetrieveRequest): Promise<runtime.ApiResponse<Candidate>> {
        if (requestParameters.xAccountToken === null || requestParameters.xAccountToken === undefined) {
            throw new runtime.RequiredError('xAccountToken','Required parameter requestParameters.xAccountToken was null or undefined when calling candidatesRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling candidatesRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeRemoteData !== undefined) {
            queryParameters['include_remote_data'] = requestParameters.includeRemoteData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccountToken !== undefined && requestParameters.xAccountToken !== null) {
            headerParameters['X-Account-Token'] = String(requestParameters.xAccountToken);
        }




        if (this.configuration && this.configuration.accessToken) {
            headerParameters["X-Account-Token"] = this.configuration.accessToken; //  authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey}`;
        }

        const response = await this.request({
            path: `/candidates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CandidateFromJSON(jsonValue));
    }

    /**
     * Returns a `Candidate` object with the given `id`.
     */
    async candidatesRetrieve(requestParameters: CandidatesRetrieveRequest): Promise<Candidate> {
        const response = await this.candidatesRetrieveRaw(requestParameters);
        return await response.value();
    }

}
