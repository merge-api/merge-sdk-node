/* tslint:disable */
/* eslint-disable */
/**
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    ActivityTypeEnum,
    ActivityTypeEnumFromJSON,
    ActivityTypeEnumFromJSONTyped,
    ActivityTypeEnumToJSON,
    VisibilityEnum,
    VisibilityEnumFromJSON,
    VisibilityEnumFromJSONTyped,
    VisibilityEnumToJSON,
} from './';


/**
 * # The Activity Object
 * ### Description
 * The `Activity` object is used to represent an activity for a candidate performed by a user.
 * ### Usage Example
 * Fetch from the `LIST Activities` endpoint and filter by `ID` to show all activities.
 * @export
 * @interface ActivityRequest
 */
export interface ActivityRequest {
    /**
     * The user that performed the action.
     * @type {string}
     * @memberof ActivityRequest
     */
    user?: string | JSONValue | null;
    /**
     * The activity's type.
     * 
     * * `NOTE` - NOTE
     * * `EMAIL` - EMAIL
     * * `OTHER` - OTHER
     * @type {ActivityTypeEnum}
     * @memberof ActivityRequest
     */
    activity_type?: ActivityTypeEnum | null;
    /**
     * The activity's subject.
     * @type {string}
     * @memberof ActivityRequest
     */
    subject?: string | null;
    /**
     * The activity's body.
     * @type {string}
     * @memberof ActivityRequest
     */
    body?: string | null;
    /**
     * The activity's visibility.
     * 
     * * `ADMIN_ONLY` - ADMIN_ONLY
     * * `PUBLIC` - PUBLIC
     * * `PRIVATE` - PRIVATE
     * @type {VisibilityEnum}
     * @memberof ActivityRequest
     */
    visibility?: VisibilityEnum | null;
    /**
     * The activityâ€™s candidate.
     * @type {string}
     * @memberof ActivityRequest
     */
    candidate?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ActivityRequest
     */
    integration_params?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ActivityRequest
     */
    linked_account_params?: { [key: string]: any; } | null;
}

export function ActivityRequestFromJSON(json: JSONValue): ActivityRequest | undefined {
    return ActivityRequestFromJSONTyped(json);
}

export function ActivityRequestFromJSONTyped(json: JSONValue): ActivityRequest | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'user': !exists(json, 'user') ? undefined : json['user'],
        'activity_type': !exists(json, 'activity_type') ? undefined : ActivityTypeEnumFromJSON(json['activity_type']) as ActivityTypeEnum,
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'visibility': !exists(json, 'visibility') ? undefined : VisibilityEnumFromJSON(json['visibility']) as VisibilityEnum,
        'candidate': !exists(json, 'candidate') ? undefined : json['candidate'],
        'integration_params': !exists(json, 'integration_params') ? undefined : json['integration_params'],
        'linked_account_params': !exists(json, 'linked_account_params') ? undefined : json['linked_account_params'],
    };
}

export function ActivityRequestToJSON(value?: ActivityRequest): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'user': value.user,
        'activity_type': ActivityTypeEnumToJSON(value.activity_type),
        'subject': value.subject,
        'body': value.body,
        'visibility': VisibilityEnumToJSON(value.visibility),
        'candidate': value.candidate,
        'integration_params': value.integration_params,
        'linked_account_params': value.linked_account_params,
    };
}

