/* tslint:disable */
/* eslint-disable */
/**
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    ActivityTypeEnum,
    ActivityTypeEnumFromJSON,
    ActivityTypeEnumFromJSONTyped,
    ActivityTypeEnumToJSON,
    
    VisibilityEnum,
    VisibilityEnumFromJSON,
    VisibilityEnumFromJSONTyped,
    VisibilityEnumToJSON,
} from './';
import {
	RemoteData,
	RemoteDataFromJSON,
	RemoteDataFromJSONTyped,
	RemoteDataToJSON,
} from '../../remote_data';


/**
 * # The Activity Object
 * ### Description
 * The `Activity` object is used to represent an activity for a candidate performed by a user.
 * ### Usage Example
 * Fetch from the `LIST Activities` endpoint and filter by `ID` to show all activities.
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Activity
     */
    remote_id?: string | null;
    /**
     * The user that performed the action.
     * @type {string}
     * @memberof Activity
     */
    user?: string | JSONValue | null;
    /**
     * When the third party's activity was created.
     * @type {Date}
     * @memberof Activity
     */
    remote_created_at?: Date | null;
    /**
     * The activity's type.
     * 
     * * `NOTE` - NOTE
     * * `EMAIL` - EMAIL
     * * `OTHER` - OTHER
     * @type {ActivityTypeEnum}
     * @memberof Activity
     */
    activity_type?: ActivityTypeEnum | null;
    /**
     * The activity's subject.
     * @type {string}
     * @memberof Activity
     */
    subject?: string | null;
    /**
     * The activity's body.
     * @type {string}
     * @memberof Activity
     */
    body?: string | null;
    /**
     * The activity's visibility.
     * 
     * * `ADMIN_ONLY` - ADMIN_ONLY
     * * `PUBLIC` - PUBLIC
     * * `PRIVATE` - PRIVATE
     * @type {VisibilityEnum}
     * @memberof Activity
     */
    visibility?: VisibilityEnum | null;
    /**
     * The activityâ€™s candidate.
     * @type {string}
     * @memberof Activity
     */
    candidate?: string | null;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof Activity
     */
    readonly remote_was_deleted?: boolean;
    /**
     * This is the datetime that this object was last updated by Merge
     * @type {Date}
     * @memberof Activity
     */
    readonly modified_at?: Date;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Activity
     */
    readonly field_mappings?: { [key: string]: any; } | null;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof Activity
     */
    readonly remote_data?: Array<RemoteData> | null;
}

export function ActivityFromJSON(json: JSONValue): Activity | undefined {
    return ActivityFromJSONTyped(json);
}

export function ActivityFromJSONTyped(json: JSONValue): Activity | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'remote_created_at': !exists(json, 'remote_created_at') ? undefined : (json['remote_created_at'] === null ? null : new Date(json['remote_created_at'])),
        'activity_type': !exists(json, 'activity_type') ? undefined : ActivityTypeEnumFromJSON(json['activity_type']) as ActivityTypeEnum,
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'visibility': !exists(json, 'visibility') ? undefined : VisibilityEnumFromJSON(json['visibility']) as VisibilityEnum,
        'candidate': !exists(json, 'candidate') ? undefined : json['candidate'],
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
        'modified_at': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'field_mappings': !exists(json, 'field_mappings') ? undefined : json['field_mappings'],
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<JSONValue>).map(RemoteDataFromJSON)) as Array<RemoteData>,
    };
}

export function ActivityToJSON(value?: Activity): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'user': value.user,
        'remote_created_at': value.remote_created_at === undefined ? undefined : (value.remote_created_at === null ? null : value.remote_created_at.toISOString()),
        'activity_type': ActivityTypeEnumToJSON(value.activity_type),
        'subject': value.subject,
        'body': value.body,
        'visibility': VisibilityEnumToJSON(value.visibility),
        'candidate': value.candidate,
    };
}

