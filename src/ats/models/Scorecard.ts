/* tslint:disable */
/* eslint-disable */
/**
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import { JSONValue } from '../../merge_json';
import {
    OverallRecommendationEnum,
    OverallRecommendationEnumFromJSON,
    OverallRecommendationEnumFromJSONTyped,
    OverallRecommendationEnumToJSON,
    
} from './';
import {
	RemoteData,
	RemoteDataFromJSON,
	RemoteDataFromJSONTyped,
	RemoteDataToJSON,
} from '../../remote_data';


/**
 * # The Scorecard Object
 * ### Description
 * The `Scorecard` object is used to represent an interviewer's candidate recommendation based on a particular interview.
 * ### Usage Example
 * Fetch from the `LIST Scorecards` endpoint and filter by `application` to show all scorecard for an applicant.
 * @export
 * @interface Scorecard
 */
export interface Scorecard {
    /**
     * 
     * @type {string}
     * @memberof Scorecard
     */
    readonly id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Scorecard
     */
    remote_id?: string | null;
    /**
     * The application being scored.
     * @type {string}
     * @memberof Scorecard
     */
    application?: string | JSONValue | null;
    /**
     * The interview being scored.
     * @type {string}
     * @memberof Scorecard
     */
    interview?: string | JSONValue | null;
    /**
     * The interviewer doing the scoring.
     * @type {string}
     * @memberof Scorecard
     */
    interviewer?: string | JSONValue | null;
    /**
     * When the third party's scorecard was created.
     * @type {Date}
     * @memberof Scorecard
     */
    remote_created_at?: Date | null;
    /**
     * When the scorecard was submitted.
     * @type {Date}
     * @memberof Scorecard
     */
    submitted_at?: Date | null;
    /**
     * The inteviewer's recommendation.
     * 
     * * `DEFINITELY_NO` - DEFINITELY_NO
     * * `NO` - NO
     * * `YES` - YES
     * * `STRONG_YES` - STRONG_YES
     * * `NO_DECISION` - NO_DECISION
     * @type {OverallRecommendationEnum}
     * @memberof Scorecard
     */
    overall_recommendation?: OverallRecommendationEnum | null;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof Scorecard
     */
    readonly remote_was_deleted?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Scorecard
     */
    readonly field_mappings?: { [key: string]: any; } | null;
    /**
     * This is the datetime that this object was last updated by Merge
     * @type {Date}
     * @memberof Scorecard
     */
    readonly modified_at?: Date;
    /**
     * 
     * @type {Array<RemoteData>}
     * @memberof Scorecard
     */
    readonly remote_data?: Array<RemoteData> | null;
}

export function ScorecardFromJSON(json: JSONValue): Scorecard | undefined {
    return ScorecardFromJSONTyped(json);
}

export function ScorecardFromJSONTyped(json: JSONValue): Scorecard | undefined {
    if ((json === undefined) || (json === null)) {
        return undefined;
    }

    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remote_id': !exists(json, 'remote_id') ? undefined : json['remote_id'],
        'application': !exists(json, 'application') ? undefined : json['application'],
        'interview': !exists(json, 'interview') ? undefined : json['interview'],
        'interviewer': !exists(json, 'interviewer') ? undefined : json['interviewer'],
        'remote_created_at': !exists(json, 'remote_created_at') ? undefined : (json['remote_created_at'] === null ? null : new Date(json['remote_created_at'])),
        'submitted_at': !exists(json, 'submitted_at') ? undefined : (json['submitted_at'] === null ? null : new Date(json['submitted_at'])),
        'overall_recommendation': !exists(json, 'overall_recommendation') ? undefined : OverallRecommendationEnumFromJSON(json['overall_recommendation']) as OverallRecommendationEnum,
        'remote_was_deleted': !exists(json, 'remote_was_deleted') ? undefined : json['remote_was_deleted'],
        'field_mappings': !exists(json, 'field_mappings') ? undefined : json['field_mappings'],
        'modified_at': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'remote_data': !exists(json, 'remote_data') ? undefined : (json['remote_data'] === null ? null : (json['remote_data'] as Array<JSONValue>).map(RemoteDataFromJSON)) as Array<RemoteData>,
    };
}

export function ScorecardToJSON(value?: Scorecard): JSONValue {
    if (value === undefined || value === null) {
        return undefined;
    }

    return {
        
        'remote_id': value.remote_id,
        'application': value.application,
        'interview': value.interview,
        'interviewer': value.interviewer,
        'remote_created_at': value.remote_created_at === undefined ? undefined : (value.remote_created_at === null ? null : value.remote_created_at.toISOString()),
        'submitted_at': value.submitted_at === undefined ? undefined : (value.submitted_at === null ? null : value.submitted_at.toISOString()),
        'overall_recommendation': OverallRecommendationEnumToJSON(value.overall_recommendation),
    };
}

